Maven
① [http://www.blogjava.net/bolo/archive/2011/05/23/349655.html]

********************************Struts2********************************
代码分布：
	|-com.xuyuan.struts2
	|-webapp/struts2
	|-struts.xml
	
参考文档：	
	http://struts.apache.org/2.x/docs/getting-started.html
	http://code.google.com/p/struts2-examples/downloads/list

创建Maven项目：
  1) add struts2 dependency support in pom.xml
  2) add struts2 fileter to web.xml
  3) add action config to struts.xml
  4) 在struts.xml配置action:struts2index,跳转到/struts2/index.jsp
  	http://localhost:8888/start_j2ee/struts2index.action 	√  【login-index.jsp菜单栏:struts2】
  	http://localhost:8888/start_j2ee/struts2/index.jsp		× 

路径跳转一：
	页面不包含struts2标签，可以直接访问.jsp页面
路径跳转一：
	页面包含struts2标签，则只能通过struts2的action配置来跳转
	1) struts.xml配置action:index.
	2) web.xml中struts2的URL为:*.action
	3) 转到webapp下的任何目录.比如/struts2/index.jsp

主题：	  	
	1.[helloworld] Hello World Using Struts 2 + Using Struts 2 Tags + Coding Struts 2 Actions
	2.[form] Processing Forms + Form Validation + Message Resource Files
	3.[formtags] Struts 2 Form Tags + Form Validation Using XML + Struts 2 Themes + Spring and Struts 2
	4.[wildcard] Wildcard Method Selection(+Spring-plugin) 占位符/Spring集成
	5.[annotatons] Annotations(+Convention-plugin) 注解使用/约定由于配置
	6.[interceptors] Interceptors(Log Interceptor) 拦截器简单运用
	7.[modeldriven] JavaBean & ModelDriven ② 字段驱动还是模型驱动
		http://www.vaannila.com/struts-2/struts-2-tutorial/struts-2-tutorial.html
	8.[fileupload] FileUpload ③ 文件路径问题/显示图片 
		http://www.blogjava.net/max/archive/2007/03/21/105124.html
	9.[json] JSON-plugin  ④ JSON格式数据显示 
	  	http://struts.apache.org/2.x/docs/json-plugin.html 
	  	http://unmi.cc/struts2-json-plugin-guide
	  	http://blog.csdn.net/kongxx/article/details/5772837

文件引入：	
	<link rel="stylesheet" type="text/css" href="<%=request.getContextPath() %>/js/extjs-3.3.1-min/resources/css/ext-all.css"/>
	<script type="text/javascript" src="<%=request.getContextPath() %>/js/extjs-3.3.1-min/adapter/ext/ext-base.js"></script>
	<script type="text/javascript" src="<%=request.getContextPath() %>/js/extjs-3.3.1-min/ext-all.js"></script>
	
	<link href="../js/extjs-3.3.1-min/resources/css/ext-all.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript" src="../js/extjs-3.3.1-min/adapter/ext/ext-base.js"></script>
	<script type="text/javascript" src="../js/extjs-3.3.1-min/ext-all.js"></script>
		
	标签库:common/taglibs.jsp
		<%@ taglib prefix="s" uri="/struts-tags"%>
		<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
		<c:set var="ctx" value="${pageContext.request.contextPath}" /> 
	页面:
		<%@ include file="/common/taglibs.jsp"%>
		<link href="${ctx}/js/extjs-3.3.1-min/resources/css/ext-all.css" rel="stylesheet" type="text/css" />
		<script type="text/javascript" src="{ctx}/js/extjs-3.3.1-min/adapter/ext/ext-base.js"></script>
		<script type="text/javascript" src="{ctx}/js/extjs-3.3.1-min/ext-all.js"></script>

********************************JSON********************************
http://localhost:8888/start_j2ee/XXX.action 					生成JSON数据，在浏览器上可以直接看到JSON数据
http://localhost:8888/start_j2ee/struts2/json-jquery.jsp		页面会调用这些Action，利用返回的JSON数据做些事情

Struts2+jQuery+JSON实现异步交互	http://zyw090111.iteye.com/blog/621302	
Struts2 - 支持JSON				http://aofengblog.blog.163.com/blog/static/6317021201072311443715/
Struts2+JQuery+JSON集成			http://blog.csdn.net/fengda2870/article/details/4052527	

com.xuyuan.struts2.json.action.Struts2JSONPluginTestAction
    使用struts2-json-plugin: 不需要用到JSON转换等任何API
	1.struts.xml extends="json-default" 或者 extends="struts-default" result-types interceptors配置对应的类
	2.Action代码里有正常的属性变量声明和对应的get方法,最后Action方法 return "success"
	3.struts.xml  <result type="json"/>    会将response中的返回数据转化为json对象
	4.页面采用jquery的$.getJSON调用回调函数,即可取到JSON数据

com.xuyuan.struts2.json.action.Struts2JSONTestAction
    使用JSON转换工具:
	1.不使用struts2-json-plugin, 在struts.xml中返回不定义:result type="json" 
	2.将数据生成JSON字符串格式（使用json-lib,gson等转换工具）
	
	3.生成JSON字符串后，有几种方式跳转到显示JSON数据的页面：
		3.1 http://localhost:8888/start_j2ee/jsonTest!jsonTest1.action 
			将JSON字符串直接response out到页面（采用HttpServletResponse的方法）， 最后Action方法 return null; 因为不再需要转向JSP页面
		3.2 http://localhost:8888/start_j2ee/jsonTest!jsonTest2.action 
			不直接输出，Action方法返回success,让struts.xml来进行跳转到jsonString.jsp，并输出
			即通过struts.xml配置的跳转页面，这个工作和1.中通过HttpServletResponse API方式原理是一样的，都是将数据呈现到页面上
		3.3 http://localhost:8888/start_j2ee/jsonTest!jsonTest3.action 
			考虑到使用HttpServletResponse API这种操作代码的可重用性，自定义JsonResult返回类型(JsonResult)
			在方法里不需要写代码，只需要在struts.xml中配置自定义的返回类型，以及参数jsonObjName. 内部都交给struts的值栈去获取，并呈现页面
		3.4 http://localhost:8888/start_j2ee/jsonTest!jsonTest4.action 
			如果在方法里能直接得到JSON字符串，则在JsonResult中不需要转换为JSONObject，直接就是String了(JsonResult2)
			
		推荐使用3.2方式：不需要使用HttpServletResponse API方式，使用跳转到页面jsonString.jsp。这个页面也是可以复用的。自定义返回类型也有点复杂。
	4.页面采用jquery的$.getJSON调用回调函数,即可取到JSON数据
	
********************************SSH********************************
代码分布：
	|-com.xuyuan.ssh
	|-WEB-INF/content
	|-struts_ssh.xml
	
参考文档
	基于Annotation的Struts2.0+Hibernate3.3+Spring2.5整合开发	http://www.blogjava.net/rongxh7/category/39847.html
	使用Annotation并对DAO层封装具有分页功能的S2SH整合实例			http://www.blogjava.net/lishunli/archive/2010/03/10/315055.html
	Struts2.1.6+Spring2.5.6+Hibernate3.3.1全注解实例详解 		http://www.blogjava.net/bolo/default.html?page=2

********************************EXTJS********************************
代码分布：
	|-com.xuyuan.extjs3
	|-webapp/extjs2, extjs3, extjs3.3.1
	|-struts_ext.xml
	
Hibernate+Spring+Struts2+ExtJS开发CRUD功能:[LevelAction]
	http://blog.csdn.net/myloon/archive/2007/11/08/1873652.aspx
	http://localhost:8888/start_j2ee/LevelAjaxJsonData.action
	http://localhost:8888/start_j2ee/extjs2/Level.jsp 【菜单栏：Grid】

Struts2、Spring、Hibernate整合ExtJS:[TreeDemoAction] 	http://www.cnblogs.com/hoojo/archive/2011/01/07/1929577.html
ExtJS Tree + JSON + Struts2:[MenuDemoAction]		http://www.blogjava.net/usherlight/archive/2008/02/19/180590.html
	http://localhost:8888/start_j2ee/treedemo.action
	http://localhost:8888/start_j2ee/menudemo.action
	http://localhost:8888/start_j2ee/extjs3/tree_demo.jsp 【菜单栏：Tree】

S2SH整合构建Ext动态树(带右键菜单操作):[TreeCRUDAction]
	http://www.cnblogs.com/BruceLeey/archive/2009/06/06/1497851.html
	http://localhost:8888/start_j2ee/extjs3/tree_crud/tree_crud.jsp 不需要DWR
 	http://localhost:8888/start_j2ee/extjs3/tree_crud/console-index.jsp 使用DWR

Struts2整合extjs 3.0集成的简单登录例子:[LoginDemoAction]
	http://dos-liu.iteye.com/blog/509053
	http://localhost:8888/start_j2ee/extjs3/login.jsp 【菜单栏：Login】

********************************Lucene3.0.3********************************
参考文档:
  	Official			http://lucene.apache.org/java/
  	周登朋@IBM 			http://www.ibm.com/developerworks/cn/java/j-lo-lucene1/
  						http://www.ibm.com/developerworks/cn/java/wa-lucene/
  						http://www.ibm.com/developerworks/cn/web/wa-lucene2/
  	① Lucene教程  		http://wenku.baidu.com/view/1af11bd076eeaeaad1f33015.html?from=related&hasrec=1
	② Lucene学习笔记 	http://www.ourys.com/post/lucene_create_index.html
	③ Lucene入门级笔记 	http://blog.csdn.net/wenlin56/article/details/6073983
	④ Lucene DB			http://jushi1988.iteye.com/blog/693188
	⑤ Lucene搜索引擎解析	http://www.iteye.com/blogs/subjects/lucene

lucene入门： org.apache.lucene.demo --> luceneweb project demo

	1.将lucene-core-3.0.3.jar和lucene-demos-3.0.3.jar设置到classpath下.
	  	只有设置到classpath下,在命令行才能执行luceneAPI的java命令
	2.在D:\下新建lucene\doc和lucene\index文件夹.往lucene\doc随便里扔一些文件.
	  	其中doc是被索引文件路径:放置的是需要检索的数据文件.
	  	index为索引数据存放路径:lucene生成的检索信息.
	3.控制台应用程序:
	  3.1 建立索引:
	    cmd>cd D:\lucene
	    >java org.apache.lucene.demo.IndexFiles D:\lucene\doc
	  	对D:\lucene\doc下的所有文件建立索引,同时在当前命令行位置(D:\lucene下生成index文件夹及索引文件)
	  3.2 执行查询:
	   	>java org.apache.lucene.demo.SearchFiles
	4.Web应用程序
	  4.1 建立索引:
	  	>java org.apache.lucene.demo.IndexHTML -create -index D:\lucene\index D:\lucene\doc
		建立索引和原始数据文件的关系.
	  	这一步其实和3.1的操作结果是一样的.都是根据doc文件生成index索引数据
	  	只不过不同的是IndexFiles和IndexHTML.
	  4.2 新建Web项目,将1.中的jar包放到项目的lib下.
		并修改configuration.jsp的indexLocation="D:/lucene/index"
		启动Tomcat,访问http://localhost:8080/start_lucene
		建立索引文件放置目录(D:\lucene\index);cmd java命令生成索引文件(index下的文件).

代码分布：
	|-com.xuyuan.lucene3
		file 文件方式
		jdbc JDBC方式
		db 和数据库结合方式，Struts2 【菜单栏：Lucene】
	|-webapp/lucene
	|-struts_util.xml	

********************************SpringMVC********************************
代码分布：

URL映射：
	web.xml的dispatcher URL映射为：
		<url-pattern>/</url-pattern>
	则URL可以为： 
		http://localhost:8888/start_j2ee/reservation/list
		
	但是由于该项目中还有Struts，所以统一用/来匹配的话，经过Struts2的URL也会到这里来。为了区别，这里不采用/。当然项目中只采用SpringMVC，则可以用/来匹配所有URL。	
	web.xml的dispatcher URL映射为：
	    <url-pattern>*.html</url-pattern>
		<url-pattern>/flows/*</url-pattern>
        
8-10. Handling Forms with Controllers
	列表页面：	http://localhost:8888/start_j2ee/reservation/list.html  必须要有后缀.html，如果没有后缀，则报错
				http://localhost:8888/start_j2ee/flows/reservation/list 只要满足url-pattern就可以，不需要后缀了 
	添加页面：	http://localhost:8888/start_j2ee/reservation/add.html
			 	http://localhost:8888/start_j2ee/reservation/add.html?username=Roger
	保存页面：	http://localhost:8888/start_j2ee/reservation/save.html
			
8-13. Creating Excel and PDF Views
url-pattern:/
	JSON:		http://localhost:8888/start_j2ee/reservation/summary.json?date=2008-01-14
	Excel:		http://localhost:8888/start_j2ee/reservation/summary.xls?date=2008-01-14
	PDF:		http://localhost:8888/start_j2ee/reservation/summary.pdf?date=2008-01-14
	XML:		http://localhost:8888/start_j2ee/reservation/summary.xml?date=2008-01-14
	JSP:		http://localhost:8888/start_j2ee/reservation/summary?date=2008-01-14

url-pattern:*.html  非.html结尾的URL需要再加上一层flows或者services.这个比较郁闷了。
	JSON:		http://localhost:8888/start_j2ee/flows/reservation/summary.json?date=2008-01-14
	Excel:		http://localhost:8888/start_j2ee/flows/reservation/summary.xls?date=2008-01-14
	PDF:		http://localhost:8888/start_j2ee/flows/reservation/summary.pdf?date=2008-01-14
	XML:		http://localhost:8888/start_j2ee/flows/reservation/summary.xml?date=2008-01-14
	JSP:		http://localhost:8888/start_j2ee/flows/reservation/summary.html?date=2008-01-14
				http://localhost:8888/start_j2ee/flows/reservation/summary?date=2008-01-14
				http://localhost:8888/start_j2ee/reservation/summary.html?date=2008-01-14
 
8-11. Handling Multipage Forms with Wizard Form Controllers
		http://localhost:8888/start_j2ee/periodicReservationForm.html

8-12. Bean validation with Annotations (JSR-303)
		http://localhost:8888/start_j2ee/member/list.html


********************************Spring WebFlow********************************
代码分布：
	|-com.xuyuan.spring3.recipes.webflow
	|-WEB-INF/flows
	|-applicationContext_webflow.xml
	
因为满足url-pattern: /flows/* 所以不需要加上后缀*.html
7-1. Managing a Simple UI Flow with Spring Web Flow
	http://localhost:8888/start_j2ee/flows/welcome

7-2. Modeling Web Flows with Different State Types
	http://localhost:8888/start_j2ee/flows/bookSearch

7-4. Persisting Objects in Web Flows
	http://localhost:8888/start_j2ee/flows/borrowBook

********************************Spring Security********************************
代码分布：
	|-com.xuyuan.spring3.recipes.security
	|-webapp/login.jsp messageList.jsp messagePost.jsp
	|-applicationContext_security.xml applicationContext_acl.xml

********************************Spring IntergrateWeb********************************
Servlet
	http://localhost:8888/start_j2ee/distance
JSF
	http://localhost:8888/start_j2ee/distance.faces
DWR
	http://localhost:8888/start_j2ee/dwr/index.html	
	http://localhost:8888/start_j2ee/dwrdemo/dwrspring.jsp

********************************Spring RPC********************************
代码分布：
	|-com.xuyuan.spring3.recipes.ws
	|-hessian-servlet.xml applicationContext_ws.xml
	|-client.xml
测试：
	先启动Tomcat，再测试Client类的方法。验证客户端调用是否正确，直接通过浏览器访问，有些情况下是会报错的。
		
Hessian
	如果把hessian-servlet.xml统一配置在dispacher-servlet.xml里。则报错：
			HTTP ERROR 404
			Problem accessing /start_j2ee/services/weather. Reason:
	    	NOT_FOUND
	    	
	所以应该单独配置，直接访问路径：http://localhost:8888/start_j2ee/services/weather 报错如下说明整合Spring和Hessian成功	
			HTTP ERROR 405
			Problem accessing /start_j2ee/services/weather. Reason:
			    HessianServiceExporter only supports POST requests	
	测试： 运行Client的testHessianByProgram(),testHessianBySpring    

HttpInvoker
	直接访问http://localhost:8888/start_j2ee/services/WeatherService2报错：
		HTTP ERROR 500
		Problem accessing /start_j2ee/services/WeatherService2. Reason:
	    INTERNAL_SERVER_ERROR	
	测试： 运行Client的testByHttpInvoker()

CXF
	注意：使用cxf，为了避免和hessian的/services/*冲突，所以定义为/cxf/*.
	如果定义为/*，则访问http://localhost:8888/start_j2ee显示所有的CXF信息，不会进入系统登录页面。这不是我们想要的。
	定义为/cxf/*，则访问http://localhost:8888/start_j2ee/cxf，才进入CXF信息。这才是想要的。
	
	直接访问http://localhost:8888/start_j2ee/cxf/WeatherService3?wsdl显示WSDL信息
	测试：运行Client的testCXF()

********************************Spring ********************************