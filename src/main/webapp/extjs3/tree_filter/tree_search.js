//http://blog.csdn.net/cxhzqhzq/article/details/3876662var treeConfigWindowCarSearch;function creatTreeConfigWindowCarSearch(config){ 		if(!config.treedepth)config.treedepth=0;	if(!config.checkModel)config.checkModel=false;	if(!config.oneCheckModel)config.oneCheckModel=false;		if(!config.rootOrg)config.rootOrg=0;	if(!config.viewUserGroup)config.viewUserGroup=false;	if(!config.selectType)config.selectType='111';	var Tree = Ext.tree;	var orghasloadNodeHashTable=new Hashtable();	var userhasloadNodeHashTable=new Hashtable();	var tree = new Tree.TreePanel({ 		 autoScroll:true,			 region: 'center', 		 height:'100%',		 animate:false,		 border :false,		 buttons :[{			text:'确定',				handler:function(){					var node=new Array();				node=ObjForReturnInButton();				try{					if(!node[0].text){}					}catch(e){					alertMsg("请选择节点");					return;				}							config.callbackFunction(node);				treeConfigWindow.hide();			}		}]	});		var root; 			//如果输入了机构代号，那么直接指定根节点	if(config.rootOrg!=0){		publicInterfaceManage.getOrgMsgNOde(config.rootOrg,function(value){						if(value!=null){				//当选择了复选框模式的时候				if(config.checkModel) {					root = new Tree.TreeNode({ 		 			id:value.n_jgdh,	 	 		 		expanded:true,		 		 		checked:false, 	 		 		attributes:[isDept=true,isKHZ=false,isCD=false],  	       		 		text: value.c_jgmc,         				icon:"../../../theme/default/images/tree/icondept.gif" 	  	 	 			}); 	  	 	 			//当选择了显示机构的时候或者树的深度选了1的时候，这里显示本机构和本机构下一级机构	  	 	 			if(config.treedepth!=1){	  	 	 				publicInterfaceManage.getJgxxList(value.n_jgdh,function(va){	  	 	 												    			for(var i=0;i<va.length;i=i+1){ 			    				 apendOrgNodeWithCheckBox(root,va[i]);				    				 initAllKhz(va[i].n_jgdh); 			    											    				}			    			});	  	 	 			}	  	 	 				publicInterfaceManage.getGroupByOrgCode(value.n_jgdh,function(khzVal){			    						    			for(var i=0;i<khzVal.length;i++){					    				//当需要显示客户，并且客户组类型为客户的时候			    								    				if(config.viewUserGroup==true&&khzVal[i].n_khzlx==1){				    					apendUserNodeWithCheckBox(root,khzVal[i]);			    									    					}				    					//当需要显示车队，并且客户组类型为车队的时候				    					if(config.viewCarGroup==true&&khzVal[i].n_khzlx==2){				    						apendCarNodeWithCheckBox(root,khzVal[i]);				    										    					}				    				}				    			})					    	//不带复选框			  	 			}else{	  	 				root = new Tree.TreeNode({ 			 			id:value.n_jgdh,	 		 		 		expanded:true,		 		 		 		       		 		text: value.c_jgmc,  	       		 		attributes:[isDept=true,isKHZ=false,isCD=false],  	       				icon:"../../../theme/default/images/tree/icondept.gif" 		  	 	 		}); 		  	 	 		//当选择了显示机构的时候或者树的深度选了1的时候，这里显示本机构和本机构下一级机构	  	 	 			if(config.treedepth!=1){	  	 	 				publicInterfaceManage.getJgxxList(value.n_jgdh,function(va1){			    			for(var i=0;i<va1.length;i=i+1){  			    				apendOrgNodeWithoutCheckBox(root,va1[i]);				    				initAllKhz(va1[i].n_jgdh);							    				}			    			});	  	 	 			}	  	 	 			publicInterfaceManage.getGroupByOrgCode(value.n_jgdh,function(khzVal){			    						    			for(var i=0;i<khzVal.length;i++){					    				//当需要显示客户，并且客户组类型为客户的时候			    								    				if(config.viewUserGroup==true&&khzVal[i].n_khzlx==1){				    					apendUserNodeWithoutCheckBox(root,khzVal[i]);				    									    					}				    					//当需要显示车队，并且客户组类型为车队的时候				    					if(config.viewCarGroup==true&&khzVal[i].n_khzlx==2){				    						apendCarNodeWithoutCheckBox(root,khzVal[i]);				    					}				    				}				    			})			  	 			}	  	 		initAllKhz(root.id); 	 	   	 		tree.setRootNode(root);	   	 		_init();				}				});	}	else{				//将当前的机构设置为树的根节点		publicInterfaceManage.getTreeRootNode(function(value){			if(value!=null){								//当选择了复选框模式的时候				if(config.checkModel) {					root = new Tree.TreeNode({ 		 			id:value.n_jgdh,	 	 		 		expanded:true,		 		 		checked:false, 	 		 		attributes:[isDept=true,isKHZ=false,isCD=false],  	       		 		text: value.c_jgmc,         				icon:"../../../theme/default/images/tree/icondept.gif" 	  	 	 			}); 	  	 	 			//当选择了显示机构的时候或者树的深度选了1的时候，这里显示本机构和本机构下一级机构	  	 	 				  	 	 			if(config.treedepth!=1){	  	 	 				publicInterfaceManage.getJgxxList(value.n_jgdh,function(va2){	  	 	 								    			for(var i=0;i<va2.length;i=i+1){ 			    				apendOrgNodeWithCheckBox(root,va2[i]);					    				initAllKhz(va2[i].n_jgdh);		    												    				}			    			});	  	 	 			}	  	 	 			publicInterfaceManage.getGroupByOrgCode(value.n_jgdh,function(khzVal){			    						    			for(var i=0;i<khzVal.length;i++){					    				//当需要显示客户，并且客户组类型为客户的时候			    								    				if(config.viewUserGroup==true&&khzVal[i].n_khzlx==1){				    					apendUserNodeWithCheckBox(root,khzVal[i]);				    									    					}				    					//当需要显示车队，并且客户组类型为车队的时候				    					if(config.viewCarGroup==true&&khzVal[i].n_khzlx==2){				    						apendCarNodeWithCheckBox(root,khzVal[i]);				    					}				    				}				    			})			  	 	 		//当不带复选框的时候	  	 			}else{	  	 				root = new Tree.TreeNode({ 			 			id:value.n_jgdh,	 		 		 		expanded:true,		 		 		 		       		 		text: value.c_jgmc,  	       		 		attributes:[isDept=true,isKHZ=false,isCD=false],  	       				icon:"../../../theme/default/images/tree/icondept.gif" 		  	 	 		}); 		  	 	 		//当选择了显示机构的时候或者树的深度选了1的时候，这里显示本机构和本机构下一级机构	  	 	 			if(config.treedepth!=1){	  	 	 				publicInterfaceManage.getJgxxList(value.n_jgdh,function(va3){			    			for(var i=0;i<va3.length;i=i+1){			    				apendOrgNodeWithoutCheckBox(root,va3[i]);  			    				initAllKhz(va3[i].n_jgdh);			    				}			    			});	  	 	 			}		  	 	 		publicInterfaceManage.getGroupByOrgCode(value.n_jgdh,function(khzVal){			    						    			for(var i=0;i<khzVal.length;i++){					    				//当需要显示客户，并且客户组类型为客户的时候			    								    				if(config.viewUserGroup==true&&khzVal[i].n_khzlx==1){				    					apendUserNodeWithoutCheckBox(root,khzVal[i]);				    					}				    					//当需要显示车队，并且客户组类型为车队的时候				    					if(config.viewCarGroup==true&&khzVal[i].n_khzlx==2){				    						apendCarNodeWithoutCheckBox(root,khzVal[i])				    					}				    				}				    			})				  	 			}	  	 			//hashtable中添加root节点	  	 			if(!orghasloadNodeHashTable.contains(root.id)){		   		   	   							orghasloadNodeHashTable.add(root.id,root);     	   			 }    	   		initAllKhz(root.id); 	 	   	 		tree.setRootNode(root);	   	 		_init();				}		});	}	function _init(){				tree.on("dblclick",apendNodeAfterClick);		tree.on('checkchange', function(node, checked) { 	 		checkChangeAction(node, checked);	 	})		treeConfigWindow=new Ext.Window({			title: '单位选择',			layout: 'border',			closable:true,			width:300,			height:400,			border:false,			plain:true,			closeAction:'close',			items: [ 			{				region:"north",				height:20,				tbar:[				{xtype:'textfield', id:'tb_s_searchCondition',emptyText:'请输入客户组姓名或者机构名称',width:200},				'->',				{xtype:'button',pressed: true, text: '查询',handler: tb_tree_search},				'-',				{xtype:'button',pressed: true, text: '重置',handler: tb_tree_reset}				]				}			,tree ]		});		treeConfigWindow.show();	}		function tb_tree_search(){		var tb_value=Ext.getCmp("tb_s_searchCondition").getValue();		if(tb_value)		hideNodeByCondition(tb_value);	}		function tb_tree_reset(){		Ext.getCmp("tb_s_searchCondition").reset();		 for(var x in orghasloadNodeHashTable._hash)		 {		  			  		 orghasloadNodeHashTable._hash[x].getUI().show();		 }		 for(var x in userhasloadNodeHashTable._hash)		 {		  		 userhasloadNodeHashTable._hash[x].getUI().show();		 }		 for(var x in carhasloadNodeHashTable._hash)		 {		  		 carhasloadNodeHashTable._hash[x].getUI().show();		 }		}	//添加一个带复选框的机构节点	function apendOrgNodeWithCheckBox(node,Val_Org){		if(!orghasloadNodeHashTable.contains(Val_Org.n_jgdh)){		   		    	    var newnode = new Tree.TreeNode({ 				id:Val_Org.n_jgdh,	 				expanded:true,				checked:false, 				attributes:[isDept=true,isKHZ=false,isCD=false], 				text:Val_Org.c_jgmc,  				icon:"../../../theme/default/images/tree/icondept.gif" 				});			node.appendChild(newnode);				orghasloadNodeHashTable.add(newnode.id,newnode);     	    }	}	//添加一个不带复选框的机构节点	function apendOrgNodeWithoutCheckBox(node,Val_Org){		if(!orghasloadNodeHashTable.contains(Val_Org.n_jgdh)){			var newnode = new Tree.TreeNode({ 				id:Val_Org.n_jgdh,	 				expanded:true,								attributes:[isDept=true,isKHZ=false,isCD=false], 				text:Val_Org.c_jgmc,  				icon:"../../../theme/default/images/tree/icondept.gif" 				});			node.appendChild(newnode);				orghasloadNodeHashTable.add(newnode.id,newnode); 		}	}		//添加一个带复选框的客户节点	function apendUserNodeWithCheckBox(node,Val_khz){		if(!userhasloadNodeHashTable.contains(Val_khz.n_khzdh)){			var newnode=new Tree.TreeNode({				id:Val_khz.n_khzdh,				expanded:true,				checked:false, 				attributes:[isDept=false,isKHZ=true,isCD=false], 				text:Val_khz.c_khzxm,				icon:"../../../theme/default/images/tree/kehu.gif"				});			node.appendChild(newnode);			userhasloadNodeHashTable.add(newnode.id,newnode);		}	}	//添加一个不带复选框的客户节点	function apendUserNodeWithoutCheckBox(node,Val_khz){		if(!userhasloadNodeHashTable.contains(Val_khz.n_khzdh)){			var newnode=new Tree.TreeNode({				id:Val_khz.n_khzdh,				expanded:true,							attributes:[isDept=false,isKHZ=true,isCD=false], 				text:Val_khz.c_khzxm,				icon:"../../../theme/default/images/tree/kehu.gif"				});			node.appendChild(newnode);			userhasloadNodeHashTable.add(newnode.id,newnode);			}	}	//添加一个带复选框的车队节点	function apendCarNodeWithCheckBox(node,Val_khz){		if(!carhasloadNodeHashTable.contains(Val_khz.n_khzdh)){			var newnode=new Tree.TreeNode({				id:Val_khz.n_khzdh,				expanded:true,				checked:false, 				attributes:[isDept=false,isKHZ=false,isCD=true], 				text:Val_khz.c_khzxm,				icon:"../../../theme/default/images/tree/chedui.gif"				});			node.appendChild(newnode);			carhasloadNodeHashTable.add(newnode.id,newnode);			}	}	//添加一个不带复选框的车队节点	function apendCarNodeWithoutCheckBox(node,Val_khz){		if(!carhasloadNodeHashTable.contains(Val_khz.n_khzdh)){			var newnode=new Tree.TreeNode({				id:Val_khz.n_khzdh,				expanded:true,							attributes:[isDept=false,isKHZ=false,isCD=true], 				text:Val_khz.c_khzxm,				icon:"../../../theme/default/images/tree/chedui.gif"				});			node.appendChild(newnode);			carhasloadNodeHashTable.add(newnode.id,newnode);			}	}		//树节点点击拓展事件	function apendNodeAfterClick(node){				if(config.checkModel)node.getUI().checkbox.checked=false;				//当点击的节点不为机构的时候，直接拓展节点				if(!node.attributes.attributes[0]){			publicInterfaceManage.getGroupForFarther(node.id,function(khzVal){			    						for(var i=0;i<khzVal.length;i++){					//当需要显示客户，并且客户组类型为客户的时候			    								if(config.viewUserGroup==true&&khzVal[i].n_khzlx==1){					if(config.checkModel){						apendUserNodeWithCheckBox(node,khzVal[i]);					}				    else{				    	apendUserNodeWithoutCheckBox(node,khzVal[i]);				    }			    									   }				 //当需要显示车队，并且客户组类型为车队的时候				 if(config.viewCarGroup==true&&khzVal[i].n_khzlx==2){				   	if(config.checkModel){				   			apendCarNodeWithCheckBox(node,khzVal[i]);				   		}				    else	apendCarNodeWithoutCheckBox(node,khzVal[i]);		    										    }				  }			})			}		//当节点类型为机构的时候		else{			//当treedepth=1的时候，只显示本机构，不显示下级机构			if(config.treedepth==1)return;			//当点击节点的深度和treedepth差一的时候，不显示当前节点的下一级机构			if(config.treedepth==(node.getDepth()+1))return;			publicInterfaceManage.getJgxxList(node.id,function(va1){			    for(var i=0;i<va1.length;i=i+1){ 			    	if(config.checkModel){			    		apendOrgNodeWithCheckBox(root,va1[i]);				    	}else 			    		apendOrgNodeWithoutCheckBox(root,va1[i]);				   	 }			   publicInterfaceManage.getGroupByOrgCode(node.id,function(khzVal){			    						    for(var i=0;i<khzVal.length;i++){					    //当需要显示客户，并且客户组类型为客户的时候			    								    if(config.viewUserGroup==true&&khzVal[i].n_khzlx==1){				    	if(config.checkModel)				    		apendUserNodeWithCheckBox(node,khzVal[i]);				    	else				    		apendUserNodeWithoutCheckBox(node,khzVal[i]);			    									    }				    //当需要显示车队，并且客户组类型为车队的时候				    if(config.viewCarGroup==true&&khzVal[i].n_khzlx==2){				    	if(config.checkModel)				   	 		apendCarNodeWithCheckBox(node,khzVal[i]);				   	 	else				   	 		apendCarNodeWithoutCheckBox(node,khzVal[i]);				    	}				    }				  })			 			 });		}	}	//节点复选框改变事件	function checkChangeAction(node, checked){		//当节点处于被选中状态的时候		if(node.getUI().checkbox.checked==true){			//单选模式的时候			if(config.oneCheckModel){				clearChildNodeChecked(root);				root.getUI().checkbox.checked=false;				//当只选择机构且节点类型为机构的时候				if(config.selectType.substring(0,1)==1&&node.attributes.attributes[0]){					node.getUI().checkbox.checked=true;					return;				}				//当只选择机构且节点类型为客户的时候				if(config.selectType.substring(1,2)==1&&node.attributes.attributes[1]){					node.getUI().checkbox.checked=true;					return;				}				//当只选择机构且节点类型为车队的时候				if(config.selectType.substring(2,3)==1&&node.attributes.attributes[2]){					node.getUI().checkbox.checked=true;					return;				}			}			//当不属于单选模式的时候			else{				//当节点类型为机构的时候				if(node.attributes.attributes[0]){					//当机构为可选类型的时候，选中此节点，否则不予选中					if(config.selectType.substring(0,1)==1){						node.getUI().checkbox.checked=true;					}else{						node.getUI().checkbox.checked=false;					}					//选中子节点					mackChildNodesChecked(node);					}				//当节点类型为客户的时候				if(node.attributes.attributes[1]){					//当客户为可选类型的时候，选中此节点，否则不予选中					if(config.selectType.substring(1,2)==1){						node.getUI().checkbox.checked=true;					}else{						node.getUI().checkbox.checked=false;					}					//选中子节点					mackChildNodesChecked(node);				}				//当节点类型为车队的时候				if(node.attributes.attributes[2]){					//当车队为可选类型的时候，选中此节点，否则不予选中					if(config.selectType.substring(2,3)==1){						node.getUI().checkbox.checked=true;					}else{						node.getUI().checkbox.checked=false;					}					//选中子节点					mackChildNodesChecked(node);				}			}		}		//当节点被取消选中的时候		else{			node.getUI().checkbox.checked=false;			clearChildNodeChecked(node);		}	}	//清空所有复选框	function clearChildNodeChecked(node){		if(node.childNodes.length!=0){			for(var i=0;i<node.childNodes.length;i++){				node.childNodes[i].getUI().checkbox.checked=false;				clearChildNodeChecked(node.childNodes[i]);			}		}	}	//根据条件选中所有子节点	function mackChildNodesChecked(node){		for(var i=0;i<node.childNodes.length;i++){			//当子节点为机构的时候直接选中			if(config.selectType.substring(0,1)==1&&node.childNodes[i].attributes.attributes[0]){				node.childNodes[i].getUI().checkbox.checked=true;			}			//当子节点为客户并且可以选择客户的时候，客户也被选中			if(config.selectType.substring(1,2)==1&&node.childNodes[i].attributes.attributes[1]){				node.childNodes[i].getUI().checkbox.checked=true;			}			//当子节点为车队并且可以选择车队的时候，车队也被选中			if(config.selectType.substring(2,3)==1&&node.childNodes[i].attributes.attributes[2]){				node.childNodes[i].getUI().checkbox.checked=true;			}		}				}	//单击确定以后的事件	function ObjForReturnInButton(){		var returnArr=new Array();		//当不为复选框模式的时候		if(!config.checkModel){						var selectNode=traversalNodeHashTable();						returnArr.push(selectNode);					}		else{			for(var x in orghasloadNodeHashTable._hash)			 {		  				  	if(orghasloadNodeHashTable._hash[x].getUI().checkbox.checked==true) 		  					  		returnArr.push(orghasloadNodeHashTable._hash[x]);			 }			 for(var x in userhasloadNodeHashTable._hash)			 {			  	if(userhasloadNodeHashTable._hash[x].getUI().checkbox.checked==true) 			  		returnArr.push(userhasloadNodeHashTable._hash[x]);			 }			 for(var x in carhasloadNodeHashTable._hash)			 {			  	if(carhasloadNodeHashTable._hash[x].getUI().checkbox.checked==true) 			  		returnArr.push(carhasloadNodeHashTable._hash[x]);			 }				}			return returnArr;	}		//通过hashTable 的方式遍历所有的树节点	function traversalNodeHashTable(){					 for(var x in orghasloadNodeHashTable._hash)		 {		  			  	if(orghasloadNodeHashTable._hash[x].isSelected()) 		  		return orghasloadNodeHashTable._hash[x];		 }		 for(var x in userhasloadNodeHashTable._hash)		 {		  	if(userhasloadNodeHashTable._hash[x].isSelected()) 		  		return userhasloadNodeHashTable._hash[x];		 }		 for(var x in carhasloadNodeHashTable._hash)		 {		  	if(carhasloadNodeHashTable._hash[x].isSelected()) 		  		return carhasloadNodeHashTable._hash[x];		 }		 	}		//根据机构代号初始化机构下面的所有客户组	function initAllKhz(n_jgdh){			publicInterfaceManage.getAllGroupByOrgCode(n_jgdh,function(calBackValue){			/**			 * key为上级节点代号,			 * value=obejct 			 * value.isDept=boolean,value.isKHZ=boolean			 * value.valArr=array();			 */						var superiorsHashtable=new Hashtable();				for(i=0;i<calBackValue.length;i++){					if(superiorsHashtable.contains(calBackValue[i].n_sjkhzdh)){							superiorsHashtable.items(calBackValue[i].n_sjkhzdh).valArr.push(calBackValue[i]);						}						var key=calBackValue[i].n_sjkhzdh;						var value=new Object();					if(calBackValue[i].n_sjkhzdh==0){												value.isDept=true;						value.isKHZ=false;																}						else{											value.isDept=false;						value.isKHZ=true;										}						var arr=new Array();						arr.push(calBackValue[i]);						value.valArr=arr;						superiorsHashtable.add(key,value);							}			//将得到的Hashtable添加到树中。									var sortedHashtable=sortHashTable(superiorsHashtable);								for(var i=0;i<sortedHashtable.length;i++){					var superiorsIsOrg=superiorsHashtable.items(sortedHashtable[i]);						if(sortedHashtable[i]==0){								for(var j=0;j<superiorsIsOrg.valArr.length;j++){									var orgNode=orghasloadNodeHashTable.items(n_jgdh);									//当需要显示客户，并且客户组类型为客户的时候			    													if(config.viewUserGroup==true&&superiorsIsOrg.valArr[j].n_khzlx==1){										if(config.checkModel){											apendUserNodeWithCheckBox(orgNode,superiorsIsOrg.valArr[j]);										}else{											apendUserNodeWithoutCheckBox(orgNode,superiorsIsOrg.valArr[j]);											}									}									//当需要显示车队，并且客户组类型为车队的时候									if(config.viewCarGroup==true&&superiorsIsOrg.valArr[j].n_khzlx==2){										if(config.checkModel){											apendCarNodeWithCheckBox(orgNode,superiorsIsOrg.valArr[j]);										}else{											apendCarNodeWithoutCheckBox(orgNode,superiorsIsOrg.valArr[j]);										}									}								}						}										else{														for(var j=0;j<superiorsIsOrg.valArr.length;j++){								//当上级节点不为空的时候								var cuParentNode=new Array();								cuParentNode=getParentNode(sortedHashtable[i]);																if(cuParentNode){									//当需要显示客户，并且客户组类型为客户的时候			    													if(config.viewUserGroup==true&&superiorsIsOrg.valArr[j].n_khzlx==1){										if(config.checkModel){											apendUserNodeWithCheckBox(cuParentNode,superiorsIsOrg.valArr[j]);										}else{											apendUserNodeWithoutCheckBox(cuParentNode,superiorsIsOrg.valArr[j]);											}				    														}									//当需要显示车队，并且客户组类型为车队的时候									if(config.viewCarGroup==true&&superiorsIsOrg.valArr[j].n_khzlx==2){										if(config.checkModel){											apendCarNodeWithCheckBox(cuParentNode,superiorsIsOrg.valArr[j]);										}else{											apendCarNodeWithoutCheckBox(cuParentNode,superiorsIsOrg.valArr[j]);										}									}								}							}						}									}		})	}			function sortHashTable(hashtable){		var sortedArr=new Array();		  for(var key in hashtable._hash){		  	sortedArr.push(key);		  }		  return sortedArr.sort();	}		//根据节点Id得到上一级的节点	function getParentNode(key){			var returnObj;			if(userhasloadNodeHashTable.items(key)) {					returnObj=userhasloadNodeHashTable.items(key);		} 		if(carhasloadNodeHashTable.items(key)){					returnObj=carhasloadNodeHashTable.items(key);		}  		return returnObj;	}		//根据搜索条件遍历hashtable，隐藏其他的节点。	function hideNodeByCondition(searchName){					hideAllTreeNode();				var conditonNodes=getNodesByCondition(searchName);			for(var i=0;i<conditonNodes.length;i++){				conditonNodes[i].getUI().show();			}			hideChildNodesAndViewParentNodes(conditonNodes);	}	function getNodesByCondition(condition){		var nodeInCondition=new Array();//存储所有包含搜索内容的节点		 for(var x in orghasloadNodeHashTable._hash)		 {				 	if(contains(orghasloadNodeHashTable._hash[x].text,condition))		 		nodeInCondition.push(orghasloadNodeHashTable._hash[x]);		 }		 for(var x in userhasloadNodeHashTable._hash)		 {		 	if(contains(userhasloadNodeHashTable._hash[x].text,condition))		 		nodeInCondition.push(userhasloadNodeHashTable._hash[x])		 }		 for(var x in carhasloadNodeHashTable._hash)		 {		 	if(contains(carhasloadNodeHashTable._hash[x].text,condition))		 		nodeInCondition.push(carhasloadNodeHashTable._hash[x])		 }		 		 return nodeInCondition;	}	//隐藏所有的节点	function hideAllTreeNode(){		 for(var x in orghasloadNodeHashTable._hash)		 {		  			  		 orghasloadNodeHashTable._hash[x].getUI().hide();		 }		 for(var x in userhasloadNodeHashTable._hash)		 {		  		 userhasloadNodeHashTable._hash[x].getUI().hide();		 }		 for(var x in carhasloadNodeHashTable._hash)		 {		  		 carhasloadNodeHashTable._hash[x].getUI().hide();		 }		}		//隐藏该节点的子节点，显示该节点的所有所有父节点	function hideChildNodesAndViewParentNodes(nodes){		for(var i=0;i<nodes.length;i++){			hideChildNodes(nodes[i]);			showParentNodes(nodes[i]);		}	}	function hideChildNodes(node){		for(var i=0;i<node.childNodes.length;i++){			node.childNodes[i].getUI().hide();		}	}	function showParentNodes(node){		if(!node.parentNode)return;		node.parentNode.getUI().show();		showParentNodes(node.parentNode);	}}