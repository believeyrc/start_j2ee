/** * 继承Ext.tree.TreePanel,给TreePanel添加工具栏上的事件处理,监听器 * 异步加载参数的传递. * @function 带checkbox的节点树 * @class Ext.hoojo.tree.CheckBoxCheckNodeTree * @extends Ext.tree.TreePanel */Ext.namespace("Ext.hoojo.tree");Ext.hoojo.tree.CheckBoxCheckNodeTree = Ext.extend(Ext.tree.TreePanel, {	constructor: function () {		this.hiddenPkgs = [];		Ext.hoojo.tree.CheckBoxCheckNodeTree.superclass.constructor.call(this, {			title: "选择节点树",			renderTo: Ext.fly("showTree"),	//呈现给tree_demo.jsp对应div#id的元素	        //xtype: "treepanel",	        //singleExpand: true, 			//只展开一个子结点，展开另一个就隐藏其他	        //autoHeight: true,				//该属性设置为true,则树节点展开超过height,不会出现滚动条,但是树的height会自动自适应.			height: 300,			width: 300,			iframe: true,	        lines: false,	        useArrows: false,	        autoScroll: true,	        rootVisible: false, 			//根节点不可见	        maskDisabled: false,	        checkModel: "multiple", 		//节点前的checkbox多选        	onlyLeafCheckable: false,        	tbar: [{	        	xtype: "textfield",	        	enableKeyEvents: true,		//启用键盘事件，默认是不开启的	        	emptyText: "请输入查询内容",	        	width: 100	        }, {	        	text: '展开',	        	//iconCls: "expandIcon",	        	handler: this.onExpendAllNode,	        	scope: this					//设置scope后，this指向MainViewport，不设置默认指向当前对象	        }, "-", {	        	text: '收缩',	        	//iconCls: "collaspeIcon",	        	handler: this.onCollspseAllNode,	        	scope: this	        }, "-", {	        	text: '刷新',	        	//iconCls: "refreshTree",	        	handler: this.onRefreshHandler,	        	scope: this	        }],	     	root: new Ext.tree.AsyncTreeNode({	        	expanded: true,	            text: "系统项目",	            id: "0"						//这个ID可以根据数据库中的数据来设置.即根节点的id	        }),	        //数据源	        loader: new Ext.tree.TreeLoader({	        	dataUrl: Ext.hoojo.tree.CheckBoxCheckNodeTree.TREE_DATA_URL,	        	clearOnLoad: false,	        	baseAttrs: {	        	 	uiProvider: Ext.ux.TreeCheckNodeUI 		//添加 uiProvider 属性,则节点前有checkbox,否则没有	        	},	        	//需要在后台传递数据的时候，需要添加一个uiProviders属性，值为col.Tree对象也要添加对应的属性	        	/*	        	baseParams: {	        		//"sort.nodeid": "0"	//错误	        		//"nodeid": "0"			//无法和node.id关联,导致无限循环	        		"nodeid": "1"	        	}	        	*/	        	/*	        	uiProviders: {	        		"col": Ext.ux.TreeCheckNodeUI	        	}	        	*/	        	//TreeLoader的监听器方式,异步加载节点: baseParams.XXX这个XXX即后台会接收到的参数名	        	listeners: {					beforeload: function(loader,node) {						this.baseParams.nodeid=node.id;	//后台通过request.getParameter("nodeid")即可接收到参数值,从而实现异步加载					}	        	}	        }),	        //节点的事件监听器(回调函数): 单击和选中事件	        listeners: {	            click: function(node) {	            	//访问节点的信息.node.text是Ext固有的属性,即你看到的树节点显示名字.	            	//node.attributes.XXX是通过JSON数据获取到的(treedemo.action查看).必须和Bean的属性对应.否则结果为undefined	                //Ext.Msg.alert("Click",node.attributes.nodeId + "," + node.text + ",");	            	window.frames["content"].document.body.innerHTML = "name:" + node.text + ", nodeId:" + node.attributes.nodeid;	            },	            check: function(node, checked){	            	//alert(node.text+" = "+ checked);	            	window.frames["content"].document.body.innerHTML = "name:" + node.text + ", nodeId:" + node.attributes.nodeid;	            }	        }		});	},	//点击topbar上的按钮的handler.注意这些代码放在constructor同级位置,不要放到tbar中	onExpendAllNode: function () {		this.onNodeExpandAll();	},	onCollspseAllNode: function () {		this.onNodeCollapseAll();	},	onRefreshHandler: function () {		this.onRefreshSystemTree();	},	//展开所有和收缩所有,针对的是root即根节点.	onNodeExpandAll: function () {		this.body.mask('Loading...', 'x-mask-loading');		var t = this;		this.root.expand(true, true, function () {			(function () {				t.body.unmask();			}).defer(200);		});	},	onNodeCollapseAll: function () {		this.root.collapse(true);	},	onRefreshSystemTree: function () {		this.body.mask('Loading...', 'x-mask-loading');		var tb = this.body;		var t = this;		this.onNodeCollapseAll();		this.root.reload(function () {			tb.unmask();			t.root.expand(true);		});		/*		this.root.reload();		setTimeout(function () {			tb.unmask();			t.onNodeExpandAll();		}, 1000);		*/	}});