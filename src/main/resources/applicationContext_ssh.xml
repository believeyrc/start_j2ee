<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/jdbc
            http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd"
   	default-autowire="byName" default-lazy-init="false">

	<!--
	Spring3 + Hibernate3
	3.使用annotation自动注册bean,保证@Required,@Autowired的属性,以及@Repository[Dao],@Service[Service]的类被注入.
	4.Hibernate配置:使用注解的方式映射实体以及创建Hibernate SessionFactory
	5.事务管理器配置:单数据源事务,使用Hibernate的事务管理
	6.AOP方式声明事务.[注解式事务控制见ssj,ssi项目] proxy-target-class="true":如果业务没有实现任何接口,则强制使用CGLib动态代理.
	-->
	<context:component-scan base-package="com.xuyuan.ssh" />

	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.xuyuan.ssh.entity.*</value>		<!-- SSH全注解实例映射:entity子包下的类 -->
				<value>com.xuyuan.extjs3.*.bean</value>		<!-- ExtJS3实体类映射:model包下的类 -->
				<value>com.xuyuan.pager.entity</value>		<!-- 分页 -->
			</list>
		</property>
	</bean>
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.xuyuan.ssh.common.hibernate.HibernateDao.*(..))" advice-ref="txAdvice" />		<!-- 没加上,则CRUD操作不会入库[HibernateDao]??给业务类加上事务就可以了,为什么Dao也要加事务?? -->
		<!-- <aop:advisor pointcut="execution(* com.xuyuan.ssh.service..*Manager.*(..))" advice-ref="txAdvice" />  -->

		<aop:advisor pointcut="execution(* com.xuyuan.extjs3..dao.*.*(..))" advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.xuyuan.pager.dao.*.*(..))" advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.xuyuan.pager_ftl.service..*.*(..))" advice-ref="txAdvice" />
		<!-- <aop:advisor pointcut="execution(* com.xuyuan.chart..dao.*.*(..))" advice-ref="txAdvice" />  -->
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">		<!-- tx:advice中不加transaction-manager="transactionManager"也是可以的. -->
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="is*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>



	<!-- **********************************************************
	以下配置因为没有被component-scan所指定的目录自动扫描,需要手动配置

	整合applicationContext_hib.xml部分,Level/Sort相关对象手动注入,
	因为没有被自动扫描,所以不用注解方式注册.并且事务控制采用统一的AOP方式
	新增的关于extjs3的配置:实体类的packagesToScan, aop:config事务控制
	*********************************************************** -->

	<!-- SSH+ExtJS + GRID DEMO -->
    <bean id="levelDao" class="com.xuyuan.extjs3.grid.dao.LevelDAO">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="levelService" class="com.xuyuan.extjs3.grid.service.LevelService">
		<property name="dao" ref="levelDao"/>
	</bean>
	<bean id="levelAction" class="com.xuyuan.extjs3.grid.action.LevelAction">
		<property name="levelService" ref="levelService"/>
	</bean>

	<!-- SSH+ExtJS + TREE DEMO -->
	<!--
	<bean id="baseDao" class="com.xuyuan.extjs3.base.BaseDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	-->
	<bean id="treeDao" class="com.xuyuan.extjs3.tree.dao.TreeDaoImpl">
		<!--  <property name="dao" ref="baseDao"/>  -->
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="treeService" class="com.xuyuan.extjs3.tree.service.TreeServiceImpl">
		<property name="dao" ref="treeDao"/>
	</bean>
	<bean id="treedemoAction" class="com.xuyuan.extjs3.tree.action.TreeDemoAction">
		<property name="treeService" ref="treeService"/>
	</bean>
    <bean id="treeCRUDAction" class="com.xuyuan.extjs3.tree.action.TreeCRUDAction" scope="prototype">
        <property name="service" ref="treeService"></property>
    </bean>

    <!-- pager分页 -->
    <!-- pager-taglib分页 -->
	<bean id="pageUserDao" class="com.xuyuan.tag.pager_taglib.dao.UserDaoImpl">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <bean name="pagerUserAction" class="com.xuyuan.tag.pager_taglib.action.UserAction" scope="prototype">
        <property name="userDaoImpl" ref="pageUserDao" />
    </bean>

    <!-- 分页1:带查询条件 -->
   	<bean id="booksDao" class="com.xuyuan.pager.dao.BooksDao">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <bean id="booksService" class="com.xuyuan.pager.service.BooksService">
        <property name="booksDao" ref="booksDao" />
    </bean>
    <bean id="pagerService" class="com.xuyuan.pager.model.PagerService"/>
    <bean id="booksAction" class="com.xuyuan.pager.action.BookAction" scope="prototype">
        <property name="booksService" ref="booksService" />
        <property name="pagerService" ref="pagerService" />
    </bean>

    <!-- 分页2:不带查询条件 -->
    <bean id="bookpage" class="com.xuyuan.pager.action.PageAction" scope="prototype">
        <property name="booksService" ref="booksService" />
    </bean>

    <!-- 分页3:采用FreeMarker: 持久层操作采用HibernateTemplate -->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
    	<property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <bean id="baseService" class="com.xuyuan.pager_ftl.service.hibernate.BaseService">
    	<property name="hibernateTemplate" ref="hibernateTemplate"/>
	</bean>
	<bean id="bookService" class="com.xuyuan.pager_ftl.service.hibernate.BookPageService">
	</bean>
	<bean id="bookPageAction" class="com.xuyuan.pager_ftl.action.hibernate.BookPageAction">
		<property name="bookService" ref="bookService" />
	</bean>

    <!-- 图表chart: 持久层操作采用Spring提供的JdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
    <bean id="browserDao" class="com.xuyuan.chart.fusionchart.dao.BrowserDao">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
    <bean id="fusionChartAction" class="com.xuyuan.chart.fusionchart.action.FusionChartAction" scope="prototype">
		<property name="browserDao" ref="browserDao" />
	</bean>

</beans>
