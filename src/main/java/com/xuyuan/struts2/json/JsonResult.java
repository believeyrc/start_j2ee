package com.xuyuan.struts2.json;import java.io.PrintWriter;import javax.servlet.http.HttpServletResponse;import net.sf.json.JSONObject;import org.apache.struts2.dispatcher.StrutsResultSupport;import com.opensymphony.xwork2.ActionInvocation;/** * 自定义JSON返回类型 */public class JsonResult extends StrutsResultSupport {	/**	 * @uml.property  name="contentTypeName"	 */	private String contentTypeName;	//struts.xml 定义的属性jsonObjName值，比如result 	//<result name="success" type="jsonResult">	//	<param name="jsonObjName">result</param>	//</result>	/**	 * @uml.property  name="jsonObjName"	 */	private String jsonObjName = "";	/**	 * @param contentTypeName	 * @uml.property  name="contentTypeName"	 */	public void setContentTypeName(String contentTypeName) {		this.contentTypeName = contentTypeName;	}	/**	 * @param jsonObjName	 * @uml.property  name="jsonObjName"	 */	public void setJsonObjName(String jsonObjName) {		this.jsonObjName = jsonObjName;	}	@Override	protected void doExecute(String finalLocation, ActionInvocation invocation) throws Exception {		HttpServletResponse response = (HttpServletResponse) invocation.getInvocationContext().get(HTTP_RESPONSE);		String contentType = conditionalParse(contentTypeName, invocation);		if (contentType == null) contentType = "text/json;charset=UTF-8";		response.setContentType(contentType);		response.setHeader("Cache-Control","no-cache");		response.setCharacterEncoding("UTF-8");				//1.对JSONObject的一层封装而已		//JsonView jsonString = (JsonView) invocation.getStack().findValue(jsonObjName);		//2.可以直接转为JSONObject		JSONObject jsonString = (JSONObject) invocation.getStack().findValue(jsonObjName);		PrintWriter out = response.getWriter();		out.write(jsonString.toString());		out.flush();		out.close();	}}