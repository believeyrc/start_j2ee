package com.xuyuan.nosql.mongodb.morphia;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.net.UnknownHostException;import org.codehaus.jackson.JsonFactory;import org.codehaus.jackson.JsonParser;import org.codehaus.jackson.map.ObjectMapper;import com.github.jmkgreen.morphia.Datastore;import com.github.jmkgreen.morphia.Key;import com.mongodb.MongoException;import com.xuyuan.nosql.mongodb.morphia.entity.OrderInfo;import com.xuyuan.nosql.mongodb.morphia.util.MongoDBConnConfig;import com.xuyuan.nosql.mongodb.morphia.util.MongoDBDataStore;/** * 将数据输入MongoDB * * 执行完毕后,到mongo客户端运行 * >use orders * >db.orderInfo.find() * @author Administrator * */public class JSONTransformData {    public static void main(String[] args) throws UnknownHostException, MongoException{        //创建Jackson全局的objectMapper 它既可以用于序列化 也可以用于反序列化        ObjectMapper objectMapper= new ObjectMapper();        //得到JSON处理的工厂对象        JsonFactory jsonFactory= objectMapper.getJsonFactory();        //得到Morphia框架的Datastore对象用于数据库操作        Datastore ds= MongoDBDataStore.getOrdersInstance();        //为保证每次本程序都得到相同结果 需要将之前的过期数据库删除        ds.getMongo().dropDatabase(MongoDBConnConfig.ORDERS_DATABASE);        //进入读文件阶段        File dataFile= new File("d:/jsonData.txt");        FileReader fr;        Integer idx=1;        try {            fr = new FileReader(dataFile);            BufferedReader br=new BufferedReader(fr);            String currentJsonStr= null;            try {                //按行读取                while((currentJsonStr= br.readLine())!=null){                    currentJsonStr= new String(currentJsonStr.getBytes(), "UTF-8");                    if (currentJsonStr.trim().equals("")){                        continue;                    }                    //进入反序列化阶段                    //通过JSON处理工厂对象创建JSON分析器                    JsonParser jsonParser= jsonFactory.createJsonParser(currentJsonStr);                    //反序列化的关键                    OrderInfo orderInfo= jsonParser.readValueAs(OrderInfo.class);                    if (orderInfo!=null){                        //将对象存入MongoDB                        Key<OrderInfo> key= ds.save(orderInfo);                        if (key!= null){                        System.out.println("已存入:"+ key.getId() + ",元素序列:"+ idx);                        System.out.println(currentJsonStr);                        }else{                            System.out.println("元素序列"+ idx+ "发生错误,JSON:");                            System.out.println(currentJsonStr);                            break;                        }                    }                    idx++;                }            } catch (UnsupportedEncodingException e) {                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            }        } catch (FileNotFoundException e) {            e.printStackTrace();        }    }}