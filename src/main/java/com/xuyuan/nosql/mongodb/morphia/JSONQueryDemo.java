package com.xuyuan.nosql.mongodb.morphia;import java.io.IOException;import java.io.StringWriter;import java.net.UnknownHostException;import java.util.Iterator;import org.codehaus.jackson.JsonGenerator;import org.codehaus.jackson.map.ObjectMapper;import com.github.jmkgreen.morphia.Datastore;import com.github.jmkgreen.morphia.query.Query;import com.mongodb.MongoException;import com.xuyuan.nosql.mongodb.morphia.entity.OrderInfo;import com.xuyuan.nosql.mongodb.morphia.util.MongoDBDataStore;/** * 查询的结果进行反序列化 * @author Administrator * */public class JSONQueryDemo {    public static void main(String[] args) throws UnknownHostException, MongoException {        //创建Jackson全局的objectMapper 它既可以用于序列化 也可以用于反序列化        ObjectMapper objectMapper= new ObjectMapper();        //得到Morphia框架的Datastore对象用于数据库操作        Datastore ds= MongoDBDataStore.getOrdersInstance();        //按条件进行查询 这里的条件是orderId等于10875的所有信息        //这里特别注意key和条件关系式"="之间要有空格        Query<OrderInfo> queryResult= ds.find(OrderInfo.class, "orderId =", 10875);        //创建查询结果的迭代器        Iterator<OrderInfo> it= queryResult.iterator();        //遍历查询结果        while(it.hasNext()){            OrderInfo orderInfo= it.next();            System.out.println("================================================");            //由于Jackson写出JSON内容时统一采用流式写出            //为了以字符串形式能够展示生成的JSON 这里特别用到了StringWriter            StringWriter sw= new StringWriter();            JsonGenerator jsonGenerator= null;            try {                //从全局的objectMapper建立JSON处理工厂,随即建立JSON生成器                jsonGenerator = objectMapper.getJsonFactory().createJsonGenerator(sw);                //流式向StringWriter中写入JSON                jsonGenerator.writeObject(orderInfo);                jsonGenerator.flush();                jsonGenerator.close();                //输出的JSON字符串                System.out.println(sw.toString());            } catch (IOException e) {                e.printStackTrace();            }        }        System.out.println("查询完成");    }}