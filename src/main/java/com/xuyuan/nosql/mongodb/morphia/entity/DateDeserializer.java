package com.xuyuan.nosql.mongodb.morphia.entity;import java.io.IOException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import org.codehaus.jackson.JsonParser;import org.codehaus.jackson.JsonProcessingException;import org.codehaus.jackson.map.DeserializationContext;import org.codehaus.jackson.map.JsonDeserializer;/** * 反序列化方法 * 泛型的JSON反序列化类被我们具象成了Date类型的，并且重写了deserialize方法。 * 传入的jsonParser是反序列化过程中的上下文，通过它我们可以找到当前处理的JSON字段内容。 * 然后将内容按照特定的要求来生成对应的数据类型（Date），然后作为返回值将其返回。 * 此时POJO中相应的字段就顺利完成了反序列化。另外这样做还能保证类型安全。 * @author Administrator * */public class DateDeserializer extends JsonDeserializer<Date>{    @Override    public Date deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)            throws IOException, JsonProcessingException {        String unformatedDate= jsonParser.getText();        SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");        Date retVal;        try {            retVal = sdf.parse(unformatedDate);        } catch (ParseException e) {            return null;        }        return retVal;    }}