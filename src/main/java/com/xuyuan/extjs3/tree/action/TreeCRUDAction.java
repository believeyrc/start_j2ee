package com.xuyuan.extjs3.tree.action;import java.util.List;import org.apache.struts2.ServletActionContext;import com.xuyuan.extjs3.tree.bean.Exttree;import com.xuyuan.extjs3.tree.service.TreeService;/** * Ext Tree CRUD DEMO * 	和TreeDemoAction共用Service,Dao. TreeDemoAction仅仅简单地从数据库中获取数据,展示出树而已.此例多了对树节点的CRUD操作. * * S2SH整合构建Ext动态树(带右键菜单操作) * http://www.cnblogs.com/BruceLeey/archive/2009/06/06/1497851.html * * http://localhost:8888/start_j2ee/extjs3/tree_crud/tree_crud.jsp 		不需要DWR * http://localhost:8888/start_j2ee/extjs3/tree_crud/console-index.jsp 	使用DWR * * 延伸: ExtJS动态树/异步加载树 * http://seraph115.iteye.com/blog/247055	http://seraph115.iteye.com/blog/246924 * 基于Ext的TreeNode实现的tree有两种方式加载：一种是同步树，即生成完整的tree。 * 另外一种是异步树，即点击父节点时才生成子节点。 * 对于节点过多的树，推荐使用异步方式加载树节点； * 对于节点较少的树，可以使用同步方式加载树节点，即完整生成树节点。 */public class TreeCRUDAction {	/**	 * @uml.property  name="extTree"	 * @uml.associationEnd  	 */	private Exttree extTree;    /**	 * @uml.property  name="service"	 * @uml.associationEnd  	 */    private TreeService service;    /**	 * @uml.property  name="list"	 */    private List<Exttree> list;    /**	 * @uml.property  name="id"	 */    private Long id;    public List<Exttree> getList() {		return list;	}	public void setList(List<Exttree> list) {		this.list = list;	}	/**	 * @return	 * @uml.property  name="id"	 */	public Long getId() {		return id;	}	/**	 * @param id	 * @uml.property  name="id"	 */	public void setId(Long id) {		this.id = id;	}	/**     * 异步获取数据     */    public String jsonData() throws Exception {        //ServletActionContext.getRequest().setAttribute("list",service.findChildById(Long.valueOf(ServletActionContext.getRequest().getParameter("id"))));    	list = service.findChildById(id);        return "JSON";    }    /**     * 添加节点     */    public String saveNode() throws Exception {        if (!"".equals(extTree.getId()) && null != extTree.getId()) {            if (service.findById(extTree.getId()) == null) {                return "ERROR";            } else {                service.modify(extTree);                return "SUCCESS";            }        }        service.save(extTree);        return "SUCCESS";    }    /**     * 修改节点     */    public String modifyNode() throws Exception {        if (null != extTree.getId()) {            ServletActionContext.getRequest().setAttribute("obj",service.findById(extTree.getId()));        } else {            ServletActionContext.getRequest().setAttribute("obj", extTree);        }        return "EDIT";    }	/**	 * @return	 * @uml.property  name="service"	 */	public TreeService getService() {		return service;	}	/**	 * @param service	 * @uml.property  name="service"	 */	public void setService(TreeService service) {		this.service = service;	}	/**	 * @return	 * @uml.property  name="extTree"	 */	public Exttree getExtTree() {        return extTree;    }    /**	 * @param extTree	 * @uml.property  name="extTree"	 */    public void setExtTree(Exttree extTree) {        this.extTree = extTree;    }}