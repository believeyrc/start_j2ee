package com.xuyuan.util.db;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;

/**
 * Apache commons-dbutils工具类使用
 * @author Administrator
 *
 */
public class DBUtilsTest {
	
	/**
	 * @uml.property  name="dataSource"
	 * @uml.associationEnd  
	 */
	private DataSource dataSource;
	/**
	 * @param dataSource
	 * @uml.property  name="dataSource"
	 */
	public void setDataSource(DataSource dataSource) { 
        this.dataSource = dataSource; 
    } 

	/**
	 * DataSource对象可以通过注入方式，更加灵活。
	 */
	public void queryByDataSource() throws SQLException{
		//-----------------------插入-------------------------
		// Create a QueryRunner that will use connections from the given DataSource
		QueryRunner run = new QueryRunner(dataSource);
		
	    // Execute the SQL update statement and return the number of inserts that were made
	    int inserts = run.update("INSERT INTO user (name,username) VALUES (?,?)", "admin_1", "admin_1" );
	    System.out.println(inserts);
	    
	    // Now it's time to rise to the occation...
	    int updates = run.update( "UPDATE user SET username=? WHERE id=?", "test_1", "1" );
	    System.out.println(updates);
		
	    //-----------------------查询-------------------------
		//Create a ResultSetHandler implementation to convert the first row into an Object[].
		ResultSetHandler<Object[]> h = new ResultSetHandler<Object[]>() {
		    public Object[] handle(ResultSet rs) throws SQLException {
		        if (!rs.next()) {
		            return null;
		        }
		        ResultSetMetaData meta = rs.getMetaData();
		        int cols = meta.getColumnCount();
		        Object[] result = new Object[cols];

		        for (int i = 0; i < cols; i++) {
		            result[i] = rs.getObject(i + 1);
		        }
		        return result;
		    }
		};
		
		// Execute the query and get the results back from the handler
		Object[] result = run.query("SELECT * FROM user WHERE name=?", h, "admin_1");
		for(Object o : result){
			System.out.print(o + " | ");
		}
	}
	
	/**
	 * Connection对象只能通过JDBC的API来获得了
	 */
	public void queryByConn() throws SQLException{
		//Create a ResultSetHandler implementation to convert the first row into an Object[].
		ResultSetHandler<Object[]> h = new ResultSetHandler<Object[]>() {
			public Object[] handle(ResultSet rs) throws SQLException {
				if (!rs.next()) {
					return null;
				}
				ResultSetMetaData meta = rs.getMetaData();
				int cols = meta.getColumnCount();
				Object[] result = new Object[cols];
				
				for (int i = 0; i < cols; i++) {
					result[i] = rs.getObject(i + 1);
				}
				return result;
			}
		};
		
		// No DataSource so we must handle Connections manually
		QueryRunner run = new QueryRunner();
		Connection conn = JDBCUtilV2.getConn(); 
		try{
			Object[] result = run.query(conn, "SELECT * FROM user WHERE name=?", h, "test1");
			for(Object o : result){
				System.out.print(o + " | ");
			}
		} finally {
			// Use this helper method so we don't have to check for null
			DbUtils.close(conn);  
		}
	}
	
	public void queryBean() throws SQLException{
		QueryRunner run = new QueryRunner(dataSource);

		// Use the BeanHandler implementation to convert the first ResultSet row into a User JavaBean.
		ResultSetHandler<User> h = new BeanHandler<User>(User.class);

		// Execute the SQL statement with one replacement parameter and return the results in a new User object generated by the BeanHandler.
		User u = run.query("SELECT * FROM user WHERE name=?", h, "admin_1"); 
		System.out.println(u);
	}
	
	public void queryList() throws SQLException{
		QueryRunner run = new QueryRunner(dataSource);

		// Use the BeanListHandler implementation to convert all ResultSet rows into a List of User JavaBeans.
		ResultSetHandler<List<User>> h = new BeanListHandler<User>(User.class);

		// Execute the SQL statement and return the results in a List of User objects generated by the BeanListHandler.
		List<User> users = run.query("SELECT * FROM user where name like '%admin%'", h);
		for(User u : users){
			System.out.println(u);
		}
	}
}
