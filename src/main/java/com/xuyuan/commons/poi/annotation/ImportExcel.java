package com.xuyuan.commons.poi.annotation;import java.io.File;import java.io.FileInputStream;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Type;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collection;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.Row;import com.xuyuan.commons.poi.annotation.bean.Testpojo;import com.xuyuan.commons.poi.annotation.util.ExcelAnnotation;/** * 将Excel文件导入成数据 * * @author Administrator * 发一个通用从数据库导出excel、excel导入数据库组件 http://www.iteye.com/topic/680586 * @param <T> */public class ImportExcel<T> {	/**	 * @uml.property  name="clazz"	 */	Class<T> clazz;	public ImportExcel(Class<T> clazz) {		this.clazz = clazz;	}	public Collection<T> importExcel(File file ,String...  pattern) {		Collection<T> dist = new ArrayList();		try {			Field filed[] = clazz.getDeclaredFields();			// 类反射得到调用方法: 得到目标目标类的所有的字段列表			Map fieldmap = new HashMap();						// 将所有标有Annotation的字段，也就是允许导入数据的字段,放入到一个map中			for (int i = 0; i < filed.length; i++) {			// 循环读取所有字段				Field f = filed[i];				ExcelAnnotation exa = f.getAnnotation(ExcelAnnotation.class);	// 得到单个字段上的Annotation				if (exa != null) {								// 如果标识了Annotationd的话					String fieldname = f.getName();				// 构造设置了Annotation的字段的Setter方法					String setMethodName = "set" + fieldname.substring(0, 1).toUpperCase() + fieldname.substring(1);					Method setMethod = clazz.getMethod(setMethodName, new Class[] { f.getType() });// 构造调用的method					fieldmap.put(exa.exportName(), setMethod);	// 将这个method以Annotaion的名字为key来存入。				}			}			/** excel的解析开始 */			FileInputStream in = new FileInputStream(file);		// 将传入的File构造为FileInputStream;			HSSFWorkbook book = new HSSFWorkbook(in);			// 得到工作表			HSSFSheet sheet = book.getSheetAt(0);				// 得到第一页			Iterator<Row> row = sheet.rowIterator();			// 得到第一面的所有行			/** 标题解析 */			Row title = row.next();								// 得到第一行，也就是标题行			Iterator<Cell> cellTitle = title.cellIterator();	// 得到第一行的所有列			Map titlemap = new HashMap();						// 将标题的文字内容放入到一个map中			int i = 0;											// 从标题第一列开始			while (cellTitle.hasNext()) {						// 循环标题所有的列				Cell cell = cellTitle.next();				String value = cell.getStringCellValue();				titlemap.put(i, value);				i = i + 1;			}			/** 解析内容行 */			SimpleDateFormat sf;			if(pattern.length<1)				sf=new SimpleDateFormat("yyyy-MM-dd");			else				sf=new SimpleDateFormat(pattern[0]);			while (row.hasNext()) {				Row rown = row.next();							// 标题下的第一行				Iterator<Cell> cellbody = rown.cellIterator();	// 行的所有列				T tObject = clazz.newInstance();				// 得到传入类的实例				int k = 0;										// 遍历一行的列				while (cellbody.hasNext()) {					Cell cell = cellbody.next();					String titleString = (String) titlemap.get(k);	// 这里得到此列的对应的标题					if (fieldmap.containsKey(titleString)) {		// 如果这一列的标题和类中的某一列的Annotation相同，那么则调用此类的的set方法，进行设值						Method setMethod = (Method) fieldmap.get(titleString);						Type[] ts = setMethod.getGenericParameterTypes();	//得到setter方法的参数						String xclass = ts[0].toString();					//只要一个参数						if(xclass. equals("class java.lang.String"))		//判断参数类型							setMethod.invoke(tObject, cell.getStringCellValue());						else if(xclass. equals("class java.util.Date"))							setMethod.invoke(tObject, sf.parse(cell.getStringCellValue()));						else if(xclass. equals("class java.lang.Boolean")) {							Boolean boolname=true;							if(cell.getStringCellValue().equals("否"))								boolname=false;							setMethod.invoke(tObject,boolname );						}						else if(xclass. equals("class java.lang.Integer"))							setMethod.invoke(tObject,new Integer( cell.getStringCellValue()));						else if(xclass. equals("class java.lang.Long"))							setMethod.invoke(tObject,new Long( cell.getStringCellValue()));					}					k = k + 1;										// 下一列				}				dist.add(tObject);			}		} catch (Exception e) {			e.printStackTrace();			return null;		}		return dist;	}}