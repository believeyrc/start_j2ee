package com.xuyuan.commons.poi.annotation;import java.io.FileOutputStream;import java.io.OutputStream;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collection;import java.util.Date;import java.util.Iterator;import java.util.List;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFCellStyle;import org.apache.poi.hssf.usermodel.HSSFRichTextString;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import com.xuyuan.commons.poi.annotation.bean.Testpojo;import com.xuyuan.commons.poi.annotation.util.ExcelAnnotation;import com.xuyuan.commons.poi.annotation.util.ExcelStyle;/** * 数据导出成Excel文件 * * @author Administrator * 发一个通用从数据库导出excel、excel导入数据库组件 http://www.iteye.com/topic/680586 * @param <T> */public class ExcelExport<T> {	//格式化日期	/**	 * @uml.property  name="sdf"	 */	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");	/**	 * @param title 标题	 * @param dataset 集合	 * @param out  输出流	 */	public void exportExcel(String title, Collection<T> dataset, OutputStream out) {		try {			Iterator<T> its = dataset.iterator();				//首先检查数据看是否是正确的			if(dataset==null||!its.hasNext()||title==null||out==null) {				throw new Exception("传入的数据不对！");			}			T ts = (T) its.next();								//取得实际泛型类			Class tCls = ts.getClass();			HSSFWorkbook workbook = new HSSFWorkbook();			// 声明一个工作薄			HSSFSheet sheet = workbook.createSheet(title);		// 生成一个表格			sheet.setDefaultColumnWidth(15);					// 设置表格默认列宽度为15个字节			HSSFCellStyle style = workbook.createCellStyle();	// 生成一个样式			style = ExcelStyle.setHeadStyle(workbook, style);	// 设置标题样式			Field filed[] = ts.getClass().getDeclaredFields();	// 得到所有字段			List<String> exportfieldtile = new ArrayList<String>();	// 标题			List<Method> methodObj = new ArrayList<Method>();	// 导出的字段的get方法			for (int i = 0; i < filed.length; i++) {			// 遍历整个filed				Field f = filed[i];				ExcelAnnotation exa = f.getAnnotation(ExcelAnnotation.class);				if (exa != null) {								// 如果设置了annottion					String exprot = exa.exportName();					exportfieldtile.add(exprot);				// 添加到标题					String fieldname = f.getName();				// 添加到需要导出的字段的方法					String getMethodName = "get" + fieldname.substring(0, 1).toUpperCase() + fieldname.substring(1);					Method getMethod = tCls.getMethod(getMethodName, new Class[] {});					methodObj.add(getMethod);				}			}			HSSFRow row = sheet.createRow(0);					// 产生表格标题行			for (int i = 0; i < exportfieldtile.size(); i++) {				HSSFCell cell = row.createCell(i);				cell.setCellStyle(style);				HSSFRichTextString text = new HSSFRichTextString(exportfieldtile.get(i));				cell.setCellValue(text);			}			int index = 0;			while (its.hasNext()) {				// 循环整个集合				index++;						// 从第二行开始写，第一行是标题				row = sheet.createRow(index);				T t = (T) its.next();				for (int k = 0; k < methodObj.size(); k++) {					HSSFCell cell = row.createCell(k);					Method getMethod=methodObj.get(k);					Object value = getMethod.invoke(t, new Object[] {});					String textValue = getValue(value);					cell.setCellValue(textValue);				}			}			workbook.write(out);		} catch (Exception e) {			e.printStackTrace();		}	}	public String getValue(Object value) {		String textValue = "";		if (value == null)			return textValue;		if (value instanceof Boolean) {			boolean bValue = (Boolean) value;			textValue = "是";			if (!bValue) {				textValue = "否";			}		} else if (value instanceof Date) {			Date date = (Date) value;			textValue = sdf.format(date);		} else			textValue = value.toString();		return textValue;	}}