package com.xuyuan.hibernate3.tutorial.domain;import java.util.HashSet;import java.util.Set;import javax.persistence.CascadeType;import javax.persistence.CollectionTable;import javax.persistence.Column;import javax.persistence.ElementCollection;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.Id;import javax.persistence.JoinColumn;import javax.persistence.JoinTable;import javax.persistence.ManyToMany;import javax.persistence.OrderBy;import javax.persistence.Table;import org.hibernate.annotations.GenericGenerator;/** * 人员 * @author Administrator * */@Entity@Table( name = "PERSON" )public class Person {    /**	 * @uml.property  name="id"	 */    private Long id;    /**	 * @uml.property  name="age"	 */    private int age;    /**	 * @uml.property  name="firstname"	 */    private String firstname;    /**	 * @uml.property  name="lastname"	 */    private String lastname;    public Person() {}    // Accessor methods for all properties, private setter for 'id'    /**	 * @return	 * @uml.property  name="id"	 */    @Id    @GeneratedValue(generator="increment")    @GenericGenerator(name="increment", strategy = "increment")    @Column(name="PERSON_ID")	public Long getId() {		return id;	}	/**	 * @param id	 * @uml.property  name="id"	 */	private void setId(Long id) {		this.id = id;	}	/**	 * @return	 * @uml.property  name="age"	 */	public int getAge() {		return age;	}	/**	 * @param age	 * @uml.property  name="age"	 */	public void setAge(int age) {		this.age = age;	}	/**	 * @return	 * @uml.property  name="firstname"	 */	public String getFirstname() {		return firstname;	}	/**	 * @param firstname	 * @uml.property  name="firstname"	 */	public void setFirstname(String firstname) {		this.firstname = firstname;	}	/**	 * @return	 * @uml.property  name="lastname"	 */	public String getLastname() {		return lastname;	}	/**	 * @param lastname	 * @uml.property  name="lastname"	 */	public void setLastname(String lastname) {		this.lastname = lastname;	}		/**	 * 一个人员可以参加多个活动，一个活动可以有多个参与人 多对多 PERSON_EVENT, 通过联接表处理单向多对多关联 PERSON_ID	EVENT_ID	 * @uml.property  name="events"	 * @uml.associationEnd  multiplicity="(0 -1)" inverse="participants:com.xuyuan.hibernate3.tutorial.domain.Event"	 */    private Set<Event> events = new HashSet<Event>();        @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})    @JoinTable(name = "PERSON_EVENT",     		joinColumns = { @JoinColumn(name ="PERSON_ID" )},     		inverseJoinColumns = { @JoinColumn(name = "EVENT_ID") })    @OrderBy("id")    //访问方法设置为protected,禁止直接操作Person对象的Set<Event>集合,可通过辅助方法addToEvent,removeFromEvent    public Set<Event> getEvents() {        return events;    }    public void setEvents(Set<Event> events) {        this.events = events;    }        //参与人添加一个事件    public void addToEvent(Event event){    	this.getEvents().add(event);    	event.getParticipants().add(this);    }    public void removeFromEvent(Event event){    	this.getEvents().remove(event);    	event.getParticipants().remove(this);    }            /**	 * 一个人员有多个联系地址 多对一 PERSON_EMAIL_ADDR, 通过联接表处理单向一对多关联 PERSON_ID 	EMAIL_ADDR	 * @uml.property  name="emailAddresses"	 * @uml.associationEnd  multiplicity="(0 -1)" elementType="java.lang.String"	 */    private Set<String> emailAddresses = new HashSet<String>();        //@OneToMany    //@JoinTable(name = "PERSON_EMAIL_ADDR", joinColumns = @JoinColumn(name="PERSON_ID") ,inverseJoinColumns = @JoinColumn(name = "EMAIL_ADDR"))    @ElementCollection    @CollectionTable(name="PERSON_EMAIL_ADDR",  joinColumns = @JoinColumn(name="PERSON_ID"))      @Column(name="EMAIL_ADDR")    public Set<String> getEmailAddresses() {        return emailAddresses;    }    public void setEmailAddresses(Set<String> emailAddresses) {        this.emailAddresses = emailAddresses;    }}