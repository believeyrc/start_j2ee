package com.xuyuan.hibernate3.tutorial.domain;import java.util.Date;import java.util.HashSet;import java.util.Set;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.GeneratedValue;import javax.persistence.Id;import javax.persistence.ManyToMany;import javax.persistence.Table;import javax.persistence.Temporal;import javax.persistence.TemporalType;import org.hibernate.annotations.GenericGenerator;/** * 事件 * @author Administrator * */@Entity@Table( name = "EVENTS" )public class Event {    /**	 * @uml.property  name="id"	 */    private Long id;    /**	 * @uml.property  name="title"	 */    private String title;    /**	 * @uml.property  name="date"	 */    private Date date;    public Event() {}    /**	 * @return	 * @uml.property  name="id"	 */    @Id    @GeneratedValue(generator="increment")    @GenericGenerator(name="increment", strategy = "increment")    @Column(name="EVENT_ID")    public Long getId() {        return id;    }    /**	 * @param id	 * @uml.property  name="id"	 */    private void setId(Long id) {        this.id = id;    }    /**	 * @return	 * @uml.property  name="date"	 */    @Temporal(TemporalType.TIMESTAMP)    @Column(name = "EVENT_DATE")    public Date getDate() {        return date;    }    /**	 * @param date	 * @uml.property  name="date"	 */    public void setDate(Date date) {        this.date = date;    }    /**	 * @return	 * @uml.property  name="title"	 */    public String getTitle() {        return title;    }    /**	 * @param title	 * @uml.property  name="title"	 */    public void setTitle(String title) {        this.title = title;    }        /**	 * 多对多双向关联:一个事件多个参与人 由于在主动方Person中定义了多对多的关系。 此处如果没有业务上的需求，可以省略该属性。不是必须定义的。 主动方采用连接表，被动方采用mappedBy属性	 * @uml.property  name="participants"	 * @uml.associationEnd  multiplicity="(0 -1)" inverse="events:com.xuyuan.hibernate3.tutorial.domain.Person"	 */    private Set<Person> participants = new HashSet<Person>();    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE},     		mappedBy = "events",     		fetch = FetchType.LAZY)    public Set<Person> getParticipants() {        return participants;    }    public void setParticipants(Set<Person> participants) {        this.participants = participants;    }}