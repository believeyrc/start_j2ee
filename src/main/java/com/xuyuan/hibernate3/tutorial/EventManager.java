package com.xuyuan.hibernate3.tutorial;import java.util.Date;import java.util.List;import java.util.Set;import org.hibernate.Session;import com.xuyuan.hibernate3.tutorial.domain.Event;import com.xuyuan.hibernate3.tutorial.domain.Person;import com.xuyuan.hibernate3.tutorial.util.HibernateUtil;public class EventManager {    public static void main(String[] args) {        EventManager mgr = new EventManager();        //mgr.clearData();         Long eventId = mgr.createAndStoreEvent("My Event", new Date()); //events        Long eventId2 = mgr.createAndStoreEvent("My Event2", new Date());         Long personId = mgr.createAndStorePerson("Foo", "Bar");//person        Long personId2 = mgr.createAndStorePerson("Foo2", "Bar2");                mgr.addPersonToEvent(personId, eventId);//person_event        mgr.addPersonToEvent(personId2, eventId);                mgr.addPersonToEvent(personId, eventId2);        mgr.addEventToPerson(personId, eventId2);        mgr.addEmailToPerson(personId, "test1@g.cn");//person_email_addr        mgr.addEmailToPerson(personId, "test2@g.cn");                mgr.listParticipantsByEventId(eventId);        System.out.println("-----------------");        mgr.listEventsByPersonId(personId);        //mgr.listEvents();        //mgr.listPersons();        HibernateUtil.getSessionFactory().close();    }    //操作前，清空数据	private void clearData() {		Session session = HibernateUtil.getSessionFactory().getCurrentSession();		session.beginTransaction();		List<Event> result2 = session.createQuery("from Event").list();		for(Event e : result2){			session.delete(e);		}				List<Person> result = session.createQuery("from Person").list();		for(Person p : result){			session.delete(p);		}        session.getTransaction().commit();	}	//创建Event	private Long createAndStoreEvent(String title, Date theDate) {        Session session = HibernateUtil.getSessionFactory().getCurrentSession();        session.beginTransaction();        Event theEvent = new Event();        theEvent.setTitle(title);        theEvent.setDate(theDate);        Long id = (Long) session.save(theEvent);        System.out.println("save event success:" + id);        session.getTransaction().commit();        return id;    }	//创建Person    private Long createAndStorePerson(String firstname, String lastname) {    	Session session = HibernateUtil.getSessionFactory().getCurrentSession();        session.beginTransaction();        Person thePerson = new Person();        thePerson.setFirstname(firstname);        thePerson.setLastname(lastname);        Long id = (Long) session.save(thePerson);        System.out.println("save person success:" + id);        session.getTransaction().commit();        return id;	}    //事件添加参与人    private void addPersonToEvent(Long personId, Long eventId) {        Session session = HibernateUtil.getSessionFactory().getCurrentSession();        session.beginTransaction();        Person aPerson = (Person) session.load(Person.class, personId);        Event anEvent = (Event) session.load(Event.class, eventId);        aPerson.getEvents().add(anEvent);        //aPerson.addToEvent(anEvent);        session.getTransaction().commit();    }    //参与人添加事件    private void addEventToPerson(Long personId, Long eventId) {        Session session = HibernateUtil.getSessionFactory().getCurrentSession();        session.beginTransaction();        Person aPerson = (Person) session.load(Person.class, personId);        Event anEvent = (Event) session.load(Event.class, eventId);        anEvent.getParticipants().add(aPerson);        session.getTransaction().commit();    }    private void addPersonToEvent2(Long personId, Long eventId) {        Session session = HibernateUtil.getSessionFactory().getCurrentSession();        session.beginTransaction();        Person aPerson = (Person) session                .createQuery("select p from Person p left join fetch p.events where p.id = :pid")                .setParameter("pid", personId)                .uniqueResult(); // Eager fetch the collection so we can use it detached        Event anEvent = (Event) session.load(Event.class, eventId);        session.getTransaction().commit();        // End of first unit of work        aPerson.getEvents().add(anEvent); // aPerson (and its collection) is detached        //aPerson.addToEvent(anEvent);        // Begin second unit of work        Session session2 = HibernateUtil.getSessionFactory().getCurrentSession();        session2.beginTransaction();        session2.update(aPerson); // Reattachment of aPerson        session2.getTransaction().commit();    }    //人添加地址    private void addEmailToPerson(Long personId, String emailAddress) {        Session session = HibernateUtil.getSessionFactory().getCurrentSession();        session.beginTransaction();        Person aPerson = (Person) session.load(Person.class, personId);        // adding to the emailAddress collection might trigger a lazy load of the collection        aPerson.getEmailAddresses().add(emailAddress);        session.getTransaction().commit();    }        //--------------------------------------------------------------------------    //事件列表    private List listEvents() {        Session session = HibernateUtil.getSessionFactory().getCurrentSession();        session.beginTransaction();        List result = session.createQuery("from Event").list();        session.getTransaction().commit();        for (int i = 0; i < result.size(); i++) {            Event theEvent = (Event) result.get(i);            System.out.println("Event: " + theEvent.getTitle() + " Time: " + theEvent.getDate());        }        return result;    }    //人员列表    private List listPersons() {    	Session session = HibernateUtil.getSessionFactory().getCurrentSession();    	session.beginTransaction();    	List result = session.createQuery("from Person").list();    	session.getTransaction().commit();    	for (int i = 0; i < result.size(); i++) {    		Person thePerson = (Person) result.get(i);    		System.out.println("FirstName: " + thePerson.getFirstname() + " LastName: " + thePerson.getLastname());    	}    	return result;    }    //根据事件取所有参与者	private void listParticipantsByEventId(Long eventId) {		Session session = HibernateUtil.getSessionFactory().getCurrentSession();		session.beginTransaction();		Event anEvent = (Event) session.load(Event.class, eventId);        Set<Person> result = anEvent.getParticipants();        System.out.println("EVENT:" + anEvent.getTitle() + "	Date:"+anEvent.getDate());        for (Person p : result) {        	Set personMails = p.getEmailAddresses();            System.out.println("	Participant " + p.getFirstname() + "		mail:" + personMails.toString());        }        session.getTransaction().commit();	}	private void listEventsByPersonId(Long personId) {		Session session = HibernateUtil.getSessionFactory().getCurrentSession();		session.beginTransaction();				Person person = (Person) session.load(Person.class, personId);		Set<Event> result = person.getEvents();				System.out.println("Person:" + person.getFirstname()+" " + person.getLastname());		for (Event e : result) {			System.out.println("	Title:" + e.getTitle() + "		Date:" + e.getDate());		}		session.getTransaction().commit();	}}