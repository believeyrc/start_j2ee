package com.xuyuan.hibernate3.model.test;import org.hibernate.Session;import org.hibernate.Transaction;import com.xuyuan.hibernate3.model.Department;import com.xuyuan.hibernate3.model.Employee;import com.xuyuan.hibernate3.util.HibernateUtil;/** * 多个员工属于一个部门,从员工这边看是多对一的关系 * emp.hbm.xml   		<many-to-one name="depart" column="depart_id" /> * dept.hbm.xml * @author Administrator * */public class Many2OneTest {	public static void main(String[] args) {		add();	//add a employee		query(1); //query Id:1 's employee		Employee emp = query2(1);		System.out.println(emp.getDepart().getName());	}	/**	 * 多个员工属于一个部门,员工表外键dept_id关联部门表主键	 *	 * s.save(depart);	 * s.save(emp);	 * insert into Department (name)  values (?)	 * insert into Employee (name, depart_id)  values (?, ?)	 * 保存Emp时,要先保存Dept. 因为我们的目的是让Employee表来关联Department表，而要想关联此表，必须保证此表已进行存储	 *	 * s.save(emp);	 * 如果不保存dep则不能通过,报错 org.hibernate.TransientObjectException: object references an unsaved transient instance -	 * 原因是此实体对象没有保存 save the transient instance before flushing: com.xuyuan.hibernate3.model.Department	 *	 * 交换以上两句的位置，看Hibernate执行的sql语句。会再增加一条更新操作。	 * s.save(emp);	 * s.save(depart);	 * insert into Employee (name, depart_id)  values (?, ?)	 * insert into Department (name)  values (?)	 * update Employee set name=?, depart_id=? where id=?	 *	 */	public static void add() {		Session s = null;		Transaction tx = null;		try {			Department depart = new Department();			depart.setName("departName");			Employee emp = new Employee();			emp.setName("empName");			emp.setDepart(depart);			s = HibernateUtil.getSession();			tx = s.beginTransaction();			s.save(depart);			s.save(emp);			tx.commit();		} finally {			if (s != null)				s.close();		}	}	/**	 * 根据员工id查询所属的部门名字:	 * JDBC-子查询:	 * select name from Department where id=(	 *   select depart_id from Employee where id=1	 * )	 * 关联查询	 * select dept.name from Department dept	 * left join Employee emp on dept.id = emp.depart_id	 * where emp.id=1	 *	 * Hibernate:	 * select id, name, depart_id from Employee where id=?	 * select id,name from Department where id=?	 * @param empId	 * @return	 */	public static Employee query(int empId) {		Session s = null;		try {			s = HibernateUtil.getSession();			Employee emp = (Employee) s.get(Employee.class, empId);			System.out.println("Department Name:" + emp.getDepart().getName());			return emp;		} finally {			if (s != null)				s.close();		}	}	static Employee query2(int empId) {		Session s = null;		try {			s = HibernateUtil.getSession();			Employee emp = (Employee) s.get(Employee.class, empId);			//Hibernate.initialize(emp.getDepart());			return emp;		} finally {			if (s != null)				s.close();		}	}}