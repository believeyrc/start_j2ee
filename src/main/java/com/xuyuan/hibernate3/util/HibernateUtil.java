package com.xuyuan.hibernate3.util;import java.io.Serializable;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.Transaction;import org.hibernate.cfg.Configuration;import com.xuyuan.hibernate3.model.User;/** * Hibernate单例实现(Struts1+Hibernate整合) 	 *  * 单例模式实现的基本方法是： * 	构造方法私有，这是为了只能是类本身来实例化自己，而不能让其他对象来二次调用；	=>private HibernateUtil() * 	给外部一个方法来获取需要单例运行的那个对象；	=>getSession() * 	类内控制只运行一次单例对象的初始化.	=>static代码块 *  * 调用方式: Session session = HibernateUtil.getSession(); * @author http://sarin.iteye.com/blog/595536 * */public class HibernateUtil {	// 重量级对象,只需初始化一次.变量私有	private static SessionFactory sessionFactory;  	    // 单例模式,私有构造函数.只创建一次对象      private HibernateUtil() {      }        // 初始化,开销很大,只做一次      static {          //用xxx.hbm.xml形式配置实体映射: mapping resource="xxx.hbm.xml"        sessionFactory = new Configuration().configure().buildSessionFactory();    	        //用Annotation形式配置实体映射:  mapping class="xxxAnnotationBean"        //sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();    }        // 相当于JDBC的注册驱动       public static SessionFactory getSessionFactory() {          return sessionFactory;      }          // 相当于JDBC的getConnection 注意：和HttpSession无关  .    public static Session getSession() {    	//return sessionFactory.openSession();        return sessionFactory.getCurrentSession();       }          public void closeSession(Session session){    	if(session != null){    		session.close();    	}    }        public static void main(String[] args) {    	//测试hibernate.cfg.xml以及HibernateUtil是否正常工作.更标准的测试见HibernateUtilTest    	//HibernateUtil.getSession();    	    	User user = new User();        user.setUsername("rongxh7");        user.setPassword("blogjava");        HibernateUtil.add(user);	}        /**      * 获得对象     */      public static Object get(Class clazz, Serializable id) {      	Session s = HibernateUtil.getSession();      	return s.get(clazz, id);    }         /**      * 保存对象      */      public static void add(Object entity) {      	//save is not valid without active transaction    	//HibernateUtil.getSession().save(entity);    	        Session s = HibernateUtil.getSession();          Transaction tx = s.beginTransaction();                s.save(entity);                  tx.commit();      }          /**      * 更新对象      */      public static void update(Object entity) {          Session s = HibernateUtil.getSession();          Transaction tx = s.beginTransaction();                s.update(entity);                  tx.commit();      }          /**      * 删除对象      */      public static void delete(Object entity) {          Session s = HibernateUtil.getSession();          Transaction tx = s.beginTransaction();                s.delete(entity);                  tx.commit();      }      }