package com.xuyuan.ssi.dao;import javax.annotation.Resource;import org.springframework.orm.ibatis.SqlMapClientTemplate;import org.springframework.stereotype.Repository;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import com.xuyuan.ssi.model.User;/** * Dao中使用Spring关于ibatis的sqlMapClient的目标实现类:SqlMapClientTemplate. * 和IbatisUserDao中的配置一样(属性sqlMapClient需要被注入),这里sqlMapClientTemplate属性也需要被注入: * SqlMapClientTemplate作为Dao实现类的属性,是Spring对ibatis的SqlMapClient实现. *  	<bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">        <property name="sqlMapClient" ref="sqlMapClient"></property>      </bean> * ************************************************************    * 注入方式的不同点是IbatisUserDao的属性sqlMapClient采用set方法注入.这里采用@Resource注解注入. * 	注解方式注入    @Resource(name="sqlMapClientTemplate")    private SqlMapClientTemplate sqlMapClientTemplate;     *  提供属性的set方法注入    public void setSqlMapClientTemplate(SqlMapClientTemplate sqlMapClientTemplate) {		this.sqlMapClientTemplate = sqlMapClientTemplate;	} * ************************************************************ * Dao通过@Repository注解方式声明:  @Repository("userDaoIbatisImpl") * 在调用Dao的地方使用@Resource注解实例化Dao对象:见IbatisUserDaoTest * [实例化对象的同时,对象会自动注入sqlMapClientTemplate] *	@Resource(name="userDaoIbatisImpl")	protected UserDaoIBatisImpl userDAO; *  *  * ************************************************************ * 或者继承SqlMapClientDaoSupport类,需要给Dao实现类注入sqlMapClient * @author Administrator * */@Repository("userDaoIbatisImpl")@Transactional(propagation=Propagation.SUPPORTS, readOnly=true)public class UserDaoIBatisImpl{	    @Resource(name="sqlMapClientTemplate")    private SqlMapClientTemplate sqlMapClientTemplate;        public User selectByUserId(Long userid) {    	//传递单个参数    	return (User) sqlMapClientTemplate.queryForObject("user.selectByUserId", userid);            	//传递对象//    	  User param = new User();//        param.setUserid(userid);//        return (User) sqlMapClientTemplate.queryForObject("user.selectByUserIdOrUserName", param);    }    public User selectByUserName(String username) {    	return (User) sqlMapClientTemplate.queryForObject("user.selectByUserName", username);    	//        User param = new User();//        param.setUsername(username);//        return (User) sqlMapClientTemplate.queryForObject("user.selectByUserIdOrUserName", param);    }        @Transactional(propagation=Propagation.REQUIRED, readOnly=false)    public int deleteByUserId(Long userid) {    	return sqlMapClientTemplate.delete("user.deleteByUserId", userid);    }        @Transactional(propagation=Propagation.REQUIRED, readOnly=false)    public Integer insertUser(User user) {    	return (Integer) sqlMapClientTemplate.insert("user.insertUser",user);    }}