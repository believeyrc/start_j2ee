package com.xuyuan.ssi.dao.user;import java.sql.SQLException;import org.springframework.stereotype.Repository;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import com.ibatis.sqlmap.client.SqlMapClient;import com.xuyuan.ssi.model.User;/** * Dao实现类--ibatis原生API实现:在Dao类中使用ibatis的SqlMapClient属性直接操作. * 注意:sqlMapClient属性需要有set方法.否则报空指针异常.[Spring将要注入对象,采用set方法] * 当然也可以使用别的方式,比如@Resource(name="sqlMapClient")注解方式,就不需要set方法了.[见UserDaoIBatisImpl] *  * 无需对Spring产生任何依赖,直接使用注入的 SqlMapClient. * sqlMapClient的实现是由Spring维护iBatis的SqlMapClient. *   	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">          <property name="dataSource" ref="dataSource" />          <property name="configLocation" value="classpath:SqlMapConfig.xml" />      </bean> * ************************************************************ * Dao通过@Repository注解方式声明:  @Repository("ibatisUserDao") * 在调用Dao的地方使用@Resource注解实例化Dao对象: * [实例化对象的同时,对象会自动注入sqlMapClient] *  	@Resource(name="ibatisUserDao")	protected IbatisUserDao userDAO; * ************************************************************ *  具体见IbatisUserDaoTest的代码.注意userDAO不需要get方法.[以下配置可以不需要,有也无妨] *     	<bean id="ibatisUserDao" class="com.xuyuan.ssi.dao.IbatisUserDao">    	<property name="sqlMapClient"  ref="sqlMapClient"/>    </bean>     * Dao中代码的具体调用还是通过iBatis的API完成. * 使用ibatis的API操作. 要捕获异常. * @author Administrator * */@Repository("ibatisUserDao")@Transactional(propagation=Propagation.SUPPORTS, readOnly=true)public class IbatisUserDao {	/**	 * @uml.property  name="sqlMapClient"	 * @uml.associationEnd  	 */	private SqlMapClient sqlMapClient;      	/**	 * @param sqlMapClient	 * @uml.property  name="sqlMapClient"	 */	public void setSqlMapClient(SqlMapClient sqlMapClient) {		this.sqlMapClient = sqlMapClient;	}	    public User selectByUserId(Long userid) throws SQLException {    	return (User) sqlMapClient.queryForObject("user.selectByUserId", userid);    }    public User selectByUserName(String username) throws SQLException {    	return (User) sqlMapClient.queryForObject("user.selectByUserName", username);    }        @Transactional(propagation=Propagation.REQUIRED, readOnly=false)    public int deleteByUserId(Long userid) throws SQLException {    	return sqlMapClient.delete("user.deleteByUserId", userid);    }        @Transactional(propagation=Propagation.REQUIRED, readOnly=false)    public Integer insertUser(User user) throws SQLException{    	return (Integer) sqlMapClient.insert("user.insertUser",user);    }}