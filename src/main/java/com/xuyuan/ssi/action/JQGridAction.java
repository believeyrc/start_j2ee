package com.xuyuan.ssi.action;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import net.sf.json.JSONObject;import org.springframework.beans.factory.annotation.Autowired;import com.xuyuan.ssi.service.UserService;import com.xuyuan.struts2.json.JsonView;/** * 增强型表格/报表-jqGrid使用浅析 * http://sarin.iteye.com/blog/526259 * @author Administrator * */public class JQGridAction {	/**	 * @uml.property  name="rows"	 */	private String rows = "10";	/**	 * @uml.property  name="page"	 */	private String page = "1";	/**	 * @uml.property  name="userService"	 * @uml.associationEnd  	 */	@Autowired	private UserService userService;	//页面获取JSON数据的几种方法	//1.生成JSON字符串，由struts.xml跳转到jsonString.jsp，并输出	//2.生成JSON字符串，采用HttpServletResponse API直接输出页面  √	/**	 * @uml.property  name="jsonString"	 */	private String jsonString = "";	//3.考虑到使用HttpServletResponse API这种操作代码的可重用性，自定义JsonResult返回类型	//在方法里不需要写代码，只需要在struts.xml中配置自定义的返回类型，以及参数jsonObjName	//内部都交给struts的值栈去获取，并呈现页面	/**	 * @uml.property  name="result"	 * @uml.associationEnd  multiplicity="(0 -1)" elementType="java.util.Map" qualifier="constant:java.lang.String java.lang.Integer"	 */	private JSONObject result = new JSONObject();	//4.和3一样，只不过用一个类JsonView对JSONObject进行了封装而已	/**	 * @uml.property  name="jsonView"	 * @uml.associationEnd  	 */	private JsonView jsonView;	/**	 * 显示用户列表，封装为JsonView类型，前端使用jqGrid插件。设置的变量名都不得更改	 */	public String userlist() {		//准备jqGrid分页参数		int total_pages = 0;		int limit = Integer.parseInt(rows); //每页显示多少条		int t_page = Integer.parseInt(page);//当前页码		int count = userService.getUserCount();//查询需要分页数据的总记录数		//计算分页参数		if (count > 0) {			total_pages = (int) Math.ceil(count / limit) + 1;		}		if (t_page > total_pages) {			t_page = total_pages;		}		int start = limit * t_page - limit;		//获取记录列表		List users = userService.getUserList(start, limit);		//封装jqGrid可识别的数据格式		List<Map> rows = new ArrayList<Map>();		for (int i = 0; i < users.size(); i++) {			Map<String, Object> map = new HashMap<String, Object>();			Object[] cell = new Object[] {				((Map) users.get(i)).get("id"),				((Map) users.get(i)).get("username"),				((Map) users.get(i)).get("password")			};			map.put("id", ((Map) users.get(i)).get("id"));//设置更新时的更新依据，一般为主键			map.put("cell", cell);			rows.add(map);		}		//数据已经准备完毕...有几种方式让页面上获得JSON数据		//JSONObject result = new JSONObject();		result.put("total", total_pages);		result.put("records", count);		result.put("page", t_page);		result.put("rows", rows);		jsonView = new JsonView(result);				jsonString = result.toString();		return "success";	}	/**	 * @return	 * @uml.property  name="jsonString"	 */	public String getJsonString() {		return jsonString;	}	/**	 * @param jsonString	 * @uml.property  name="jsonString"	 */	public void setJsonString(String jsonString) {		this.jsonString = jsonString;	}	/**	 * @return	 * @uml.property  name="rows"	 */	public String getRows() {		return rows;	}	/**	 * @param rows	 * @uml.property  name="rows"	 */	public void setRows(String rows) {		this.rows = rows;	}	/**	 * @return	 * @uml.property  name="page"	 */	public String getPage() {		return page;	}	/**	 * @param page	 * @uml.property  name="page"	 */	public void setPage(String page) {		this.page = page;	}	/**	 * @return	 * @uml.property  name="userService"	 */	public UserService getUserService() {		return userService;	}	/**	 * @param userService	 * @uml.property  name="userService"	 */	public void setUserService(UserService userService) {		this.userService = userService;	}	/**	 * @return	 * @uml.property  name="jsonView"	 */	public JsonView getJsonView() {		return jsonView;	}	/**	 * @param jsonView	 * @uml.property  name="jsonView"	 */	public void setJsonView(JsonView jsonView) {		this.jsonView = jsonView;	}}