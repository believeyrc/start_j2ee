package com.xuyuan.spring3.jdbc;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.CallableStatementCreator;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.SqlInOutParameter;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.SqlReturnResultSet;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.support.rowset.SqlRowSet;

public class JdbcTemplateTest {

	private static JdbcTemplate jdbcTemplate;

	@BeforeClass
	public static void setUpClass() {
		String url = "jdbc:hsqldb:mem:test";
		String username = "sa";
		String password = "";
		DriverManagerDataSource dataSource = new DriverManagerDataSource(url,
				username, password);
		dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
		jdbcTemplate = new JdbcTemplate(dataSource);
	}

	@AfterClass
	public static void tearDownClass() {
		jdbcTemplate = null;
	}

	@Before
	public void setUp() {
		// id自增主键从0开始
		String createTableSql = "create memory table test"
				+ "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
				+ "name varchar(100))";
		jdbcTemplate.update(createTableSql);

		String createHsqldbFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str VARCHAR(100)) "
				+ "returns INT begin atomic return length(str);end";
		jdbcTemplate.update(createHsqldbFunctionSql);
		String createHsqldbProcedureSql = "CREATE PROCEDURE PROCEDURE_TEST"
				+ "(INOUT inOutName VARCHAR(100), OUT outId INT) "
				+ "MODIFIES SQL DATA " + "BEGIN ATOMIC "
				+ "  insert into test(name) values (inOutName); "
				+ "  SET outId = IDENTITY(); "
				+ "  SET inOutName = 'Hello,' + inOutName; " + "END";
		jdbcTemplate.execute(createHsqldbProcedureSql);
	}

	@After
	public void tearDown() {
		jdbcTemplate.execute("DROP FUNCTION FUNCTION_TEST");
		jdbcTemplate.execute("DROP PROCEDURE PROCEDURE_TEST");
		String dropTableSql = "drop table test";
		jdbcTemplate.execute(dropTableSql);
	}

	@Test
	public void test00_CURD() {
		insert();
		delete();
		update();
		select();
	}

	private void insert() {
		jdbcTemplate.update("insert into test(name) values('name1')");
		jdbcTemplate.update("insert into test(name) values('name2')");
		Assert.assertEquals(2,
				jdbcTemplate.queryForInt("select count(*) from test"));
	}

	private void delete() {
		jdbcTemplate.update("delete from test where name=?",
				new Object[] { "name2" });
		Assert.assertEquals(1,
				jdbcTemplate.queryForInt("select count(*) from test"));
	}

	private void update() {
		jdbcTemplate.update("update test set name='name3' where name=?",
				new Object[] { "name1" });
		Assert.assertEquals(1, jdbcTemplate
				.queryForInt("select count(*) from test where name='name3'"));
	}

	private void select() {
		jdbcTemplate.query("select * from test", new RowCallbackHandler() {
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				System.out.print("====id:" + rs.getInt("id"));
				System.out.println(",name:" + rs.getString("name"));
			}
		});
	}

	// 1.声明SQL
	// 2.处理结果集
	@Test
	public void test01_MoreSimple() {
		String sql = "select * from INFORMATION_SCHEMA.SYSTEM_TABLES";
		jdbcTemplate.query(sql, new RowCallbackHandler() {
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				String value = rs.getString("TABLE_NAME");
				System.out.println("Column TABLENAME:" + value);
			}
		});
	}

	// 1.使用PreparedStatementCreator创建一个预编译语句
	// 2.由JdbcTemplate通过PreparedStatementCallback回调传回，由用户决定如何执行该PreparedStatement
	@Test
	public void test02_PreparedStatement_Creator_Callback() {
		int count = jdbcTemplate.execute(new PreparedStatementCreator() {
			@Override
			public PreparedStatement createPreparedStatement(Connection conn)
					throws SQLException {
				return conn.prepareStatement("select count(*) from test");
			}
		}, new PreparedStatementCallback<Integer>() {
			@Override
			public Integer doInPreparedStatement(PreparedStatement pstmt)
					throws SQLException, DataAccessException {
				pstmt.execute();
				ResultSet rs = pstmt.getResultSet();
				rs.next();
				return rs.getInt(1);
			}
		});
		Assert.assertEquals(0, count);
	}

	// 1. jdbcTemplate.update(sql,PreparedStatementSetter)执行预编译sql
	// 2. 使用setValues(PreparedStatement pstmt)回调方法设值相应的占位符位置的值
	@Test
	public void test03_PreparedStatement_Setter() {
		String insertSql = "insert into test(name) values (?)";
		int count = jdbcTemplate.update(insertSql,
				new PreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement pstmt)
							throws SQLException {
						pstmt.setObject(1, "name4");
					}
				});
		Assert.assertEquals(1, count);

		// 更简单的方法
		String deleteSql = "delete from test where name=?";
		count = jdbcTemplate.update(deleteSql, new Object[] { "name4" });
		Assert.assertEquals(1, count);
	}

	// RowMapper.mapRow()将结果集的每一行转换为一个Map，或者其他形式，比如对象
	@Test
	public void test04_ResultSet_mapRow() {
		jdbcTemplate.update("insert into test(name) values('name5')");
		String listSql = "select * from test";
		List result = jdbcTemplate.query(listSql, new RowMapper<Map>() {
			@Override
			public Map mapRow(ResultSet rs, int rowNum) throws SQLException {
				Map row = new HashMap();
				row.put(rs.getInt("id"), rs.getString("name"));
				return row;
			}
		});
		Assert.assertEquals(1, result.size());
		jdbcTemplate.update("delete from test where name='name5'");
	}

	// ResultSetExtractor.extractData 将结果集的行转换为需要的形式:提供给用户整个结果集，让用户决定如何处理该结果集。
	@Test
	public void test05_ResultSet_extractData() {
		jdbcTemplate.update("insert into test(name) values('name5')");
		String listSql = "select * from test";
		List result = jdbcTemplate.query(listSql,
				new ResultSetExtractor<List>() {
					@Override
					public List extractData(ResultSet rs) throws SQLException,
							DataAccessException {
						List result = new ArrayList();
						while (rs.next()) {
							Map row = new HashMap();
							row.put(rs.getInt("id"), rs.getString("name"));
							result.add(row);
						}
						return result;
					}
				});
		Assert.assertEquals(0, result.size());
		jdbcTemplate.update("delete from test where name='name5'");
	}

	/**
	 * 更简单的queryForXXX方法 queryForInt 查询一行数据并返回int型结果 queryForMap
	 * 查询一行数据并将该行数据转换为Map返回 queryForObject 查询一行任何类型的数据，最后一个参数指定返回结果类型
	 * queryForList 查询一批数据，默认将每行数据转换为Map 只查询一列数据列表，列类型是String类型，列名字是name
	 * queryForRowSet 查询一批数据，返回为SqlRowSet，类似于ResultSet，但不再绑定到连接上
	 */
	public void test06_ResultSet_MoreSimple() {
		jdbcTemplate
				.execute("alter table test add column last_name varchar(100)");
		jdbcTemplate.update("insert into test(name) values('name5')");

		int count = jdbcTemplate.queryForInt("select count(*) from test");
		Assert.assertEquals(1, count);

		Map result1 = jdbcTemplate
				.queryForMap("select * from test where name='name5'");
		Assert.assertEquals("name5", result1.get("name"));

		count = jdbcTemplate.queryForObject("select count(*) from test",
				Integer.class);
		Assert.assertEquals(1, count);

		List<Map<String, Object>> result2 = jdbcTemplate
				.queryForList("select * from test");
		Assert.assertEquals(1, result2.size());

		List<String> result3 = jdbcTemplate.queryForList(
				"select name from test where name=?", new Object[] { "name5" },
				String.class);
		Assert.assertEquals(1, result3.size());

		SqlRowSet rs = jdbcTemplate.queryForRowSet("select * from test");
		List result4 = new ArrayList();
		while (rs.next()) {
			result4.add(rs.getInt("id"));
		}
		Assert.assertEquals(1, result4.size());

		jdbcTemplate.update("delete from test where name='name5'");
	}

	@Test
	public void test07_CallableStatementCreator1() {
		final String callFunctionSql = "{call FUNCTION_TEST(?)}";
		List<SqlParameter> params = new ArrayList<SqlParameter>();
		params.add(new SqlParameter(Types.VARCHAR));
		params.add(new SqlReturnResultSet("result",
				new ResultSetExtractor<Integer>() {
					@Override
					public Integer extractData(ResultSet rs)
							throws SQLException, DataAccessException {
						while (rs.next()) {
							return rs.getInt(1);
						}
						return 0;
					}
				}));

		Map<String, Object> outValues = jdbcTemplate.call(
				new CallableStatementCreator() {
					@Override
					public CallableStatement createCallableStatement(
							Connection conn) throws SQLException {
						CallableStatement cstmt = conn
								.prepareCall(callFunctionSql);
						cstmt.setString(1, "test");
						return cstmt;
					}
				}, params);
		Assert.assertEquals(4, outValues.get("result"));
	}

	@Test
    public void test08_CallableStatementCreator2_mysql() {
        //1.首先登录mysql控制台创建test数据库
        String url = "jdbc:mysql://localhost:3306/test";
        DriverManagerDataSource dataSource = new DriverManagerDataSource(url, "root", "root");
        dataSource.setDriverClassName("com.mysql.jdbc.Driver");
        JdbcTemplate mysqlJdbcTemplate = new JdbcTemplate(dataSource);
        
        //2.创建自定义函数
        String createFunctionSql = 
            "CREATE FUNCTION FUNCTION_TEST(str VARCHAR(100)) " +
            "returns INT return LENGTH(str)";
        String dropFunctionSql = "DROP FUNCTION IF EXISTS FUNCTION_TEST";
        mysqlJdbcTemplate.update(dropFunctionSql);
        mysqlJdbcTemplate.update(createFunctionSql);
        //3.准备sql
        final String callFunctionSql = "{?= call FUNCTION_TEST(?)}";
        //4.定义参数
        List<SqlParameter> params = new ArrayList<SqlParameter>();
        params.add(new SqlOutParameter("result", Types.INTEGER));
        params.add(new SqlParameter("str", Types.VARCHAR));
        
        Map<String, Object> outValues = mysqlJdbcTemplate.call(new CallableStatementCreator() {
            @Override
            public CallableStatement createCallableStatement(Connection conn)
                throws SQLException {
                CallableStatement cstmt = conn.prepareCall(callFunctionSql);
                cstmt.registerOutParameter(1, Types.INTEGER);
                cstmt.setString(2, "test");
                return cstmt;
            }
        }, params);
        
        Assert.assertEquals(4, outValues.get("result"));
    }
    
    @Test
    public void test09_CallableStatementCreator3() {
        final String callProcedureSql = "{call PROCEDURE_TEST(?, ?)}";
        List<SqlParameter> params = new ArrayList<SqlParameter>();
        params.add(new SqlInOutParameter("inOutName", Types.VARCHAR));
        params.add(new SqlOutParameter("outId", Types.INTEGER));
        
        Map<String, Object> outValues = jdbcTemplate.call(new CallableStatementCreator() {
            
            @Override
            public CallableStatement createCallableStatement(Connection conn) throws SQLException {
                CallableStatement cstmt = conn.prepareCall(callProcedureSql);
                cstmt.registerOutParameter(1, Types.VARCHAR);
                cstmt.registerOutParameter(2, Types.INTEGER);
                cstmt.setString(1, "test");
                return cstmt;
            }
        }, params);
        Assert.assertEquals("Hello,test", outValues.get("inOutName"));
        Assert.assertEquals(0, outValues.get("outId"));
    }
    
    
    /**
     * NamedParameterJdbcTemplate
     * NamedParameterJdbcTemplate类为命名参数设值有两种方式：java.util.Map和SqlParameterSource
     */
    @Test
    public void test10_NamedParameterJdbcTemplate1() {
        NamedParameterJdbcTemplate template = null;
        //template = new NamedParameterJdbcTemplate(dataSource);
        template = new NamedParameterJdbcTemplate(jdbcTemplate);
        
        String insertSql = "insert into test(name) values(:name)"; //“:name”就是命名参数
        String selectSql = "select * from test where name=:name";
        String deleteSql = "delete from test where name=:name";
        
        Map<String, Object> paramMap = new HashMap<String, Object>();
        paramMap.put("name", "name5");
        
        // Map
        template.update(insertSql, paramMap);
        
        final List<Integer> result = new ArrayList<Integer>();
        template.query(selectSql, paramMap, new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                result.add(rs.getInt("id"));
            }
        });
        Assert.assertEquals(1, result.size());
        
        // SqlParameterSource
        SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
        template.update(deleteSql, paramSource);
        
        
        class Model {
            private int id;
            private String myName;
            public void setId(int id) {
                this.id = id;
            }
            public int getId() {
                return id;
            }
            public void setMyName(String myName) {
                this.myName = myName;
            }
            public String getMyName() {
                return myName;
            }
        }
        Model model = new Model();
        model.setId(1);
        model.setMyName("name5");
        insertSql = "insert into test(name) values(:myName)";
        paramSource = new BeanPropertySqlParameterSource(model);
        template.update(insertSql, paramSource);
    }

    @Test
    public void test11_SimpleJdbcTemplate() {
        //还支持DataSource和NamedParameterJdbcTemplate作为构造器参数
        SimpleJdbcTemplate simpleJdbcTemplate = new SimpleJdbcTemplate(jdbcTemplate);
        String insertSql = "insert into test(id, name) values(?, ?)";
        simpleJdbcTemplate.update(insertSql, 10, "name5");
        
        String selectSql = "select * from test where id=? and name=?";
        List<Map<String, Object>> result = simpleJdbcTemplate.queryForList(selectSql, 10, "name5");
        Assert.assertEquals(1, result.size());
        
        RowMapper<UserModel> mapper = new UserRowMapper();        
        List<UserModel> result2 = simpleJdbcTemplate.query(selectSql, mapper, 10, "name5");
        Assert.assertEquals(1, result2.size());
    }
    

}
