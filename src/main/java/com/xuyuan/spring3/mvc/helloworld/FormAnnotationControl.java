package com.xuyuan.spring3.mvc.helloworld;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.view.RedirectView;import com.xuyuan.spring3.mvc.model.User;@Controllerpublic class FormAnnotationControl {		/**	 * 全局对象	 * 此注解可以用于web请求参数和方法参数的绑定，也可用于方法的返回值作为模型数据（这种模型数据在类中全局有效，	 * 比如这里initUser方法绑定的模型数据在此类的任何方法中都能访问到这种模型数据）	 * 	 * 在initUser方法中我们通过ModelAttribute注解初始化了一个模型数据，这样我们便可以在此类对应的任何方法映射的视图中访问到此模型数据，	 * 这也即是前面提到这种模型数据在类中全局有效。	 */	@ModelAttribute("user")	public User initUser() {		User user = new User();		user.setUsername("username input here");		return user;	}	//http://localhost:8080/start_j2ee/reg.do => reg.jsp	@RequestMapping("reg.do")	public String addUI() {		return "reg";	}	/**	 * 在reg.jsp提交表单转到该方法:     http://localhost:8080/start_j2ee/save.do =>userInfo.jsp	 * 在save方法中我们同样使用了ModelAttribute注解，此注解在save方法中实现了web请求参数和方法参数的绑定的功能，	 * 也即是说把web中username、password和ModelAttribute指示的user中的username、password进行绑定，	 * 这种绑定和struts2中的模型驱动ModerDriven极为相似.	 */	@RequestMapping("save.do")	public String add(@ModelAttribute User user, Model model) {		model.addAttribute(user);		return "userInfo";	}	/**	 * http://localhost:8080/start_j2ee/login.do => success:list.jsp; error:error.jsp	 * 如果是admin登录我们重定向到管理页面，如果不是admin登录，我们使用forward进行转发	 */	@RequestMapping("login.do")	public ModelAndView login(@ModelAttribute User user) {		ModelAndView mav = new ModelAndView(new RedirectView("manage.do"));		if (!"admin".equals(user.getUsername())) {			mav = new ModelAndView("error");		}		return mav;	}	//http://localhost:8080/start_j2ee/manager.do => list.jsp	@RequestMapping("manage.do")	public String manage() {		return "list";	}}