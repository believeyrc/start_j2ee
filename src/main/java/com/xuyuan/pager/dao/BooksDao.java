package com.xuyuan.pager.dao;import java.sql.SQLException;import java.util.List;import org.hibernate.HibernateException;import org.hibernate.Query;import org.hibernate.Session;import org.springframework.orm.hibernate3.HibernateCallback;import org.springframework.orm.hibernate3.support.HibernateDaoSupport;import org.springframework.stereotype.Repository;import com.xuyuan.pager.entity.Books;//@Repositorypublic class BooksDao extends HibernateDaoSupport implements IBooksDao {	//-----------------------------------分页查询:将HQL语句放到Service层中传入.	public List queryForPage(final String hql,final int offset,final int pageSize){        List list = getHibernateTemplate().executeFind(new HibernateCallback(){            public Object doInHibernate(Session session) throws HibernateException,SQLException{                Query query = session.createQuery(hql);                query.setFirstResult(offset);                query.setMaxResults(pageSize);                List list = query.list();                return list;            }        });        return list;    }    public int getAllRowCount(String hql){        return getHibernateTemplate().find(hql).size();    }    //-----------------------------------    //以下代码跟上面的2个方法其实是一样的.只不过是HQL语句放在Dao,还是Service而已.    //查询全部数据,以及分页查询,查询总记录数.这2种情况,都会用到getRows查询总数同一个方法.	public List getAll() {		String sql = "FROM Books";		return this.getHibernateTemplate().find(sql);	}	public List getBooks(final int pageSize, final int startRow) throws HibernateException {		return this.getHibernateTemplate().executeFind(new HibernateCallback() {			public List doInHibernate(Session session) throws HibernateException, SQLException {				Query query = session.createQuery("FROM Books");				query.setFirstResult(startRow);				query.setMaxResults(pageSize);				return query.list();			}		});	}	public int getRows() {		String sql = "FROM Books";		return this.getHibernateTemplate().find(sql).size();	}		//带查询条件的查询:同样有带查询条件的查询全部数据,带查询条件的分页查询,以及带查询条件的总记录数.最好使用占位符,防止SQL注入.	public List queryBooks(String fieldname, String value) {		String sql = "FROM Books where " + fieldname + " like '%" + value + "%'";		return this.getHibernateTemplate().find(sql);	}	public List getBooks(String queryName, String queryValue, final int pageSize, final int startRow) {		String sql = "";		if (queryName == null || queryName.equals("") || queryValue == null || queryValue.equals(""))			sql = "FROM Books ORDER BY bookName";		else			sql = "FROM Books where " + queryName + " like '%" + queryValue + "%'";		final String sql1 = sql;		return this.getHibernateTemplate().executeFind(new HibernateCallback() {			public List doInHibernate(Session session) throws HibernateException, SQLException {				Query query = session.createQuery(sql1);				query.setFirstResult(startRow);				query.setMaxResults(pageSize);				return query.list();			}		});	}	public int getRows(String fieldname, String value) {		String sql = "";		if (fieldname == null || fieldname.equals("") || fieldname == null || fieldname.equals(""))			sql = "FROM Books ORDER BY bookName";		else			sql = "FROM Books where " + fieldname + " like '%" + value + "%'";		return this.getHibernateTemplate().find(sql).size();	}		//实体类的其他操作.添加,删除,更新.	public void addBook(Books book) {		this.getHibernateTemplate().save(book);	}	public void deleteBook(Books book) {		this.getHibernateTemplate().delete(book);	}	public Books getBook(Integer bookId) {		return (Books) this.getHibernateTemplate().get(Books.class, bookId);	}	public void updateBook(Books pd) {		this.getHibernateTemplate().update(pd);	}		//辅助方法//	public Integer getMaxID() {//		String sql = "SELECT MAX(bookId)+1 FROM Books";//		String noStr = null;//		List ll = (List) this.getHibernateTemplate().find(sql);//		Iterator itr = ll.iterator();//		if (itr.hasNext()) {//			Object noint = itr.next();//			if (noint == null) {//				noStr = "1";//			} else {//				noStr = noint.toString();//			}//		}//		if (noStr.length() == 1) {//			noStr = "000" + noStr;//		} else if (noStr.length() == 2) {//			noStr = "00" + noStr;//		} else if (noStr.length() == 3) {//			noStr = "0" + noStr;//		} else {//			noStr = noStr;//		}//		return noStr;//	}}