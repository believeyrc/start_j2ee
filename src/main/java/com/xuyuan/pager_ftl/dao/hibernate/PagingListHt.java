package com.xuyuan.pager_ftl.dao.hibernate;import java.util.ArrayList;import java.util.List;import org.hibernate.Hibernate;import org.hibernate.Query;import org.hibernate.Session;import org.springframework.orm.hibernate3.HibernateTemplate;import org.springframework.orm.hibernate3.support.HibernateDaoSupport;import com.xuyuan.util.Constants;/** * 基于Struts2的Hibernate分页实现（FreeMarker进行视图解析） * Hibernate分页查询辅助类(目前仅支持HQL方式) * @author http://sarin.iteye.com/blog/703537 */public class PagingListHt extends HibernateDaoSupport {		private int rowCount = 0; 							// 记录总数	private int pageCount = 1; 							// 分页总数	private int pageSize = Constants.DEFAULT_PAGE_SIZE; // 每页记录数	private int pageNum = 1; 							// 当前页数	private int startIndex = 1; 						// 起始记录数	private int endIndex = 1; 							// 结束记录数	private List list = new ArrayList();				// 记录列表		/* 获得对象列表 */	public List getList() {		return list;	}	/* 获得起始记录数 */	public int getStartIndex() {		return startIndex;	}	/* 获得结束记录数 */	public int getEndIndex() {		return endIndex;	}	/* 获得分页其它信息 */	public int getPageCount() {		return pageCount;	}	public int getPageNum() {		return pageNum;	}	public int getPageSize() {		return pageSize;	}	public int getRowCount() {		return rowCount;	}		public PagingListHt(){			}		/**	 * 构造方法，HQL无参数，单对象	 * 	 * @param hibernateTemplate ht对象	 * @param pageNum 第几页	 * @param pageSize 每页显示数目	 * @param hql HQL语句	 * @param clazz 对象类型	 */	public PagingListHt(HibernateTemplate hibernateTemplate,int pageNum, int pageSize, String hql, Class clazz) {		preProcessParams(pageNum, pageSize);		execute(hibernateTemplate, pageNum, pageSize, hql, clazz);	}	/**	 * 构造方法，HQL无参数，多对象	 */	public PagingListHt(HibernateTemplate hibernateTemplate,int pageNum, int pageSize, String hql) {		preProcessParams(pageNum, pageSize);		execute(hibernateTemplate, pageNum, pageSize, hql);	}	/**	 * 构造方法，HQL有参数，单对象	 * 	 * @param parameters Object[]类型的参数	 */	public PagingListHt(HibernateTemplate hibernateTemplate,int pageNum, int pageSize, 			String hql, Object[] parameters, Class clazz) {		preProcessParams(pageNum, pageSize);		execute(hibernateTemplate, pageNum, pageSize, hql, parameters, clazz);	}	/**	 * 构造方法，HQL有参数，多对象	 */	public PagingListHt(HibernateTemplate hibernateTemplate,int pageNum, int pageSize, 			String hql, Object[] parameters) {		preProcessParams(pageNum, pageSize);		execute(hibernateTemplate, pageNum, pageSize, hql, parameters);	}		/**	 * 预处理页面参数	 */	private void preProcessParams(int pageNum, int pageSize) {		if (pageNum > 0) {			this.pageNum = pageNum;		}		if (pageSize > 0) {			this.pageSize = pageSize;		}		if (pageSize > Constants.MAX_PAGE_SIZE) {			this.pageSize = Constants.MAX_PAGE_SIZE;		}	}		/**	 * 根据给定的数据计算相关分页信息，多对象HQL	 */	private void execute(HibernateTemplate hibernateTemplate,int pageNum, int pageSize, String hql) {		// 获取Hibernate当前的Session		//Session session = hibernateTemplate.getSessionFactory().getCurrentSession();		Session session = hibernateTemplate.getSessionFactory().getCurrentSession();		// 获取记录总数		this.rowCount = hibernateTemplate.find(hql).size();		// 计算分页数及起止记录		countPage();		// 获取List		list = session.createQuery(hql).setFirstResult((pageNum - 1) * pageSize).setMaxResults(pageSize).list();	}		/**	 * 根据给定的数据计算相关分页信息，单对象HQL，且无where限制条件	 */	private void execute(HibernateTemplate hibernateTemplate,int pageNum, int pageSize, String hql, Class clazz) {		Session session = hibernateTemplate.getSessionFactory().getCurrentSession();		this.rowCount = (Integer)session.createQuery("select count(*) from " + clazz.getName()).uniqueResult();		countPage();		list = session.createQuery(hql).setFirstResult((pageNum - 1) * pageSize).setMaxResults(pageSize).list();	}		/**	 * 重载的分页方法，接受预编译HQL语句，HQL单对象且无where限制条件	 */	private void execute(HibernateTemplate hibernateTemplate,int pageNum, int pageSize, String hql, Object[] parameters, Class clazz) {		Session session = hibernateTemplate.getSessionFactory().getCurrentSession();		this.rowCount = (Integer)session.createQuery("select count(*) from " + clazz.getName()).uniqueResult();		countPage();		// 预编译HQL语句,为预编译HQL语句设置参数		Query query = session.createQuery(hql);		for (int i = 0; i < parameters.length; i++) {			query.setParameter(i, String.valueOf(parameters[i]),Hibernate.STRING);		}				list = query.setFirstResult((pageNum - 1) * pageSize).setMaxResults(pageSize).list();	}		/**	 * 重载的分页方法，接受预编译HQL语句，HQL多对象	 */	private void execute(HibernateTemplate hibernateTemplate,int pageNum, int pageSize, String hql, Object[] parameters) {		Session session = hibernateTemplate.getSessionFactory().getCurrentSession();		this.rowCount = hibernateTemplate.find(hql, parameters).size();		countPage();				// 预编译HQL语句		Query query = session.createQuery(hql);		// 为预编译HQL语句设置参数		for (int i = 0; i < parameters.length; i++) {			query.setParameter(i, String.valueOf(parameters[i]),Hibernate.STRING);		}		list = query.setFirstResult((pageNum - 1) * pageSize).setMaxResults(pageSize).list();	}	/**	 * 计算分页数及起止记录	 */	private void countPage() {		// 计算分页总数		if ((rowCount % pageSize) == 0) {			pageCount = rowCount / pageSize;		} else {			pageCount = rowCount / pageSize + 1;		}		if (pageCount == 0) {			pageCount = 1;		}		// 判断pageNum是否过界		if (pageNum > pageCount && rowCount != 0) {			pageNum = pageCount;		}		// 计算起止记录		startIndex = (pageNum - 1) * pageSize + 1;		endIndex = (pageNum) * pageSize;	}}