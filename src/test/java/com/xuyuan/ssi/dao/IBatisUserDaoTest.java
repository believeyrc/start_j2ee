package com.xuyuan.ssi.dao;import static org.junit.Assert.*;import javax.annotation.Resource;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;import com.xuyuan.ssi.model.User;/** * @author Administrator * */@ContextConfiguration(locations={"/applicationContext_ssi.xml"})public class IBatisUserDaoTest extends AbstractTransactionalJUnit4SpringContextTests{		//Ibatis的sqlMapClient	//@Resource(name="ibatisUserDao")	//protected IbatisUserDao userDAO;		@Resource(name="userDaoIbatisImpl")	protected UserDaoIBatisImpl userDAO;		protected Long userId = 111L;		@Before    public void setUp() throws Exception {		String sql = "insert into ssh_user(id,username,password) values(?, ?, ?)";        simpleJdbcTemplate.update(sql, 111,"test111","test111" );    }        @After    public void tearDown() throws Exception {    	//String sql = "delete from ssh_user where id = ?";        //simpleJdbcTemplate.update(sql, 111);    }        //测试成功,但是没有入库.原因:    @Test    public void testInsertUser() throws Exception{    	User user = new User();    	user.setId(112L);    	user.setUsername("test112");    	user.setPassword("test112");    	Integer res = userDAO.insertUser(user);    	System.out.println(res);    }        // 测试查询已经存在的记录    @Test    public void testSelectByUserIdForExist() throws Exception{        User record = userDAO.selectByUserId(userId);                assertNotNull(record);                assertEquals(111, record.getId().longValue());        assertEquals("test"+userId, record.getUsername());    }    // 测试查询不存在的记录    @Test    public void testSelectByUserIdForNotExist() throws Exception{        User record = userDAO.selectByUserId(100L);                assertNull(record);    }    // 测试查询用户名存在的记录    @Test    public void testSelectByUserNameForExist() throws Exception{        User record = userDAO.selectByUserName("test"+userId);                assertNotNull(record);                assertEquals(111, record.getId().longValue());        assertEquals("test"+userId, record.getUsername());    }    // 测试查询用户名不存在的记录    @Test    public void testSelectByUserNameForNotExist() throws Exception{        User record = userDAO.selectByUserName("userNotExists");                assertNull(record);    }        // 测试删除已经存在的记录.    @Test    public void testDeleteByUserIdForExist() throws Exception{        int result = userDAO.deleteByUserId(userId);	//删除成功,返回1        assertEquals(1, result);    }    // 测试删除不存在的记录.    @Test    public void testDeleteByUserIdForNotExist() throws Exception{        int result = userDAO.deleteByUserId(100L);		//删除失败,返回0        assertEquals(0, result);    }}